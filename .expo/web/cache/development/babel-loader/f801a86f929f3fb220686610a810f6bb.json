{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _art = require(\"@react-native-community/art\");\n\nvar _Arc = _interopRequireDefault(require(\"./Shapes/Arc\"));\n\nvar _jsxFileName = \"C:\\\\Program Files\\\\nodejs\\\\ComeClosely\\\\node_modules\\\\react-native-progress\\\\CircleSnail.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar AnimatedArc = _reactNative.Animated.createAnimatedComponent(_Arc.default);\n\nvar MIN_ARC_ANGLE = 0.1;\nvar MAX_ARC_ANGLE = 1.5 * Math.PI;\n\nvar CircleSnail = function (_Component) {\n  (0, _inherits2.default)(CircleSnail, _Component);\n\n  var _super = _createSuper(CircleSnail);\n\n  function CircleSnail(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, CircleSnail);\n    _this = _super.call(this, props);\n    _this.state = {\n      startAngle: new _reactNative.Animated.Value(-MIN_ARC_ANGLE),\n      endAngle: new _reactNative.Animated.Value(0),\n      rotation: new _reactNative.Animated.Value(0),\n      colorIndex: 0\n    };\n    return _this;\n  }\n\n  (0, _createClass2.default)(CircleSnail, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.animating) {\n        this.animate();\n        this.spin();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.animating !== this.props.animating) {\n        if (this.props.animating) {\n          this.animate();\n          this.spin();\n        } else {\n          this.stopAnimations();\n        }\n      }\n    }\n  }, {\n    key: \"animate\",\n    value: function animate() {\n      var _this2 = this;\n\n      var iteration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\n      _reactNative.Animated.sequence([_reactNative.Animated.timing(this.state.startAngle, {\n        toValue: -MAX_ARC_ANGLE * iteration - MIN_ARC_ANGLE,\n        duration: this.props.duration || 1000,\n        isInteraction: false,\n        easing: _reactNative.Easing.inOut(_reactNative.Easing.quad),\n        useNativeDriver: this.props.useNativeDriver\n      }), _reactNative.Animated.timing(this.state.endAngle, {\n        toValue: -MAX_ARC_ANGLE * iteration,\n        duration: this.props.duration || 1000,\n        isInteraction: false,\n        easing: _reactNative.Easing.inOut(_reactNative.Easing.quad),\n        useNativeDriver: this.props.useNativeDriver\n      })]).start(function (endState) {\n        if (endState.finished) {\n          if (Array.isArray(_this2.props.color)) {\n            _this2.setState({\n              colorIndex: iteration % _this2.props.color.length\n            });\n          }\n\n          _this2.animate(iteration + 1);\n        }\n      });\n    }\n  }, {\n    key: \"spin\",\n    value: function spin() {\n      var _this3 = this;\n\n      _reactNative.Animated.timing(this.state.rotation, {\n        toValue: 1,\n        duration: this.props.spinDuration || 5000,\n        easing: _reactNative.Easing.linear,\n        isInteraction: false,\n        useNativeDriver: this.props.useNativeDriver\n      }).start(function (endState) {\n        if (endState.finished) {\n          _this3.state.rotation.setValue(0);\n\n          _this3.spin();\n        }\n      });\n    }\n  }, {\n    key: \"stopAnimations\",\n    value: function stopAnimations() {\n      this.state.startAngle.stopAnimation();\n      this.state.endAngle.stopAnimation();\n      this.state.rotation.stopAnimation();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          animating = _this$props.animating,\n          children = _this$props.children,\n          color = _this$props.color,\n          direction = _this$props.direction,\n          hidesWhenStopped = _this$props.hidesWhenStopped,\n          size = _this$props.size,\n          style = _this$props.style,\n          thickness = _this$props.thickness,\n          strokeCap = _this$props.strokeCap,\n          restProps = (0, _objectWithoutProperties2.default)(_this$props, [\"animating\", \"children\", \"color\", \"direction\", \"hidesWhenStopped\", \"size\", \"style\", \"thickness\", \"strokeCap\"]);\n\n      if (!animating && hidesWhenStopped) {\n        return null;\n      }\n\n      var radius = size / 2 - thickness;\n      var offset = {\n        top: thickness,\n        left: thickness\n      };\n      var directionFactor = direction === 'counter-clockwise' ? -1 : 1;\n      return _react.default.createElement(_reactNative.Animated.View, (0, _extends2.default)({}, restProps, {\n        style: [style, {\n          backgroundColor: 'transparent',\n          overflow: 'hidden',\n          transform: [{\n            rotate: this.state.rotation.interpolate({\n              inputRange: [0, 1],\n              outputRange: ['0deg', directionFactor * 360 + \"deg\"]\n            })\n          }]\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 7\n        }\n      }), _react.default.createElement(_art.Surface, {\n        width: size,\n        height: size,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 9\n        }\n      }, _react.default.createElement(AnimatedArc, {\n        direction: direction === 'counter-clockwise' ? 'clockwise' : 'counter-clockwise',\n        radius: radius,\n        stroke: Array.isArray(color) ? color[this.state.colorIndex] : color,\n        offset: offset,\n        startAngle: this.state.startAngle,\n        endAngle: this.state.endAngle,\n        strokeCap: strokeCap,\n        strokeWidth: thickness,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }\n      })), children);\n    }\n  }]);\n  return CircleSnail;\n}(_react.Component);\n\nexports.default = CircleSnail;\nCircleSnail.propTypes = {\n  animating: _propTypes.default.bool,\n  color: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.arrayOf(_propTypes.default.string)]),\n  children: _propTypes.default.node,\n  direction: _propTypes.default.oneOf(['clockwise', 'counter-clockwise']),\n  duration: _propTypes.default.number,\n  hidesWhenStopped: _propTypes.default.bool,\n  size: _propTypes.default.number,\n  spinDuration: _propTypes.default.number,\n  style: _propTypes.default.any,\n  thickness: _propTypes.default.number,\n  strokeCap: _propTypes.default.string,\n  useNativeDriver: _propTypes.default.bool\n};\nCircleSnail.defaultProps = {\n  animating: true,\n  color: 'rgba(0, 122, 255, 1)',\n  direction: 'counter-clockwise',\n  hidesWhenStopped: false,\n  size: 40,\n  thickness: 3,\n  strokeCap: 'round',\n  useNativeDriver: false\n};","map":{"version":3,"sources":["C:/Program Files/nodejs/ComeClosely/node_modules/react-native-progress/CircleSnail.js"],"names":["AnimatedArc","Animated","createAnimatedComponent","Arc","MIN_ARC_ANGLE","MAX_ARC_ANGLE","Math","PI","CircleSnail","props","state","startAngle","Value","endAngle","rotation","colorIndex","animating","animate","spin","prevProps","stopAnimations","iteration","sequence","timing","toValue","duration","isInteraction","easing","Easing","inOut","quad","useNativeDriver","start","endState","finished","Array","isArray","color","setState","length","spinDuration","linear","setValue","stopAnimation","children","direction","hidesWhenStopped","size","style","thickness","strokeCap","restProps","radius","offset","top","left","directionFactor","backgroundColor","overflow","transform","rotate","interpolate","inputRange","outputRange","Component","propTypes","PropTypes","bool","oneOfType","string","arrayOf","node","oneOf","number","any","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, Easing } from 'react-native';\nimport { Surface as ARTSurface } from '@react-native-community/art';\n\nimport Arc from './Shapes/Arc';\n\nconst AnimatedArc = Animated.createAnimatedComponent(Arc);\n\nconst MIN_ARC_ANGLE = 0.1;\nconst MAX_ARC_ANGLE = 1.5 * Math.PI;\n\nexport default class CircleSnail extends Component {\n  static propTypes = {\n    animating: PropTypes.bool,\n    color: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.arrayOf(PropTypes.string),\n    ]),\n    children: PropTypes.node,\n    direction: PropTypes.oneOf(['clockwise', 'counter-clockwise']),\n    duration: PropTypes.number,\n    hidesWhenStopped: PropTypes.bool,\n    size: PropTypes.number,\n    spinDuration: PropTypes.number,\n    style: PropTypes.any,\n    thickness: PropTypes.number,\n    strokeCap: PropTypes.string,\n    useNativeDriver: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    animating: true,\n    color: 'rgba(0, 122, 255, 1)',\n    direction: 'counter-clockwise',\n    hidesWhenStopped: false,\n    size: 40,\n    thickness: 3,\n    strokeCap: 'round',\n    useNativeDriver: false,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      startAngle: new Animated.Value(-MIN_ARC_ANGLE),\n      endAngle: new Animated.Value(0),\n      rotation: new Animated.Value(0),\n      colorIndex: 0,\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.animating) {\n      this.animate();\n      this.spin();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.animating !== this.props.animating) {\n      if (this.props.animating) {\n        this.animate();\n        this.spin();\n      } else {\n        this.stopAnimations();\n      }\n    }\n  }\n\n  animate(iteration = 1) {\n    Animated.sequence([\n      Animated.timing(this.state.startAngle, {\n        toValue: -MAX_ARC_ANGLE * iteration - MIN_ARC_ANGLE,\n        duration: this.props.duration || 1000,\n        isInteraction: false,\n        easing: Easing.inOut(Easing.quad),\n        useNativeDriver: this.props.useNativeDriver,\n      }),\n      Animated.timing(this.state.endAngle, {\n        toValue: -MAX_ARC_ANGLE * iteration,\n        duration: this.props.duration || 1000,\n        isInteraction: false,\n        easing: Easing.inOut(Easing.quad),\n        useNativeDriver: this.props.useNativeDriver,\n      }),\n    ]).start(endState => {\n      if (endState.finished) {\n        if (Array.isArray(this.props.color)) {\n          this.setState({\n            colorIndex: iteration % this.props.color.length,\n          });\n        }\n        this.animate(iteration + 1);\n      }\n    });\n  }\n\n  spin() {\n    Animated.timing(this.state.rotation, {\n      toValue: 1,\n      duration: this.props.spinDuration || 5000,\n      easing: Easing.linear,\n      isInteraction: false,\n      useNativeDriver: this.props.useNativeDriver,\n    }).start(endState => {\n      if (endState.finished) {\n        this.state.rotation.setValue(0);\n        this.spin();\n      }\n    });\n  }\n\n  stopAnimations() {\n    this.state.startAngle.stopAnimation();\n    this.state.endAngle.stopAnimation();\n    this.state.rotation.stopAnimation();\n  }\n\n  render() {\n    const {\n      animating,\n      children,\n      color,\n      direction,\n      hidesWhenStopped,\n      size,\n      style,\n      thickness,\n      strokeCap,\n      ...restProps\n    } = this.props;\n\n    if (!animating && hidesWhenStopped) {\n      return null;\n    }\n\n    const radius = size / 2 - thickness;\n    const offset = {\n      top: thickness,\n      left: thickness,\n    };\n\n    const directionFactor = direction === 'counter-clockwise' ? -1 : 1;\n\n    return (\n      <Animated.View\n        {...restProps}\n        style={[\n          style,\n          {\n            backgroundColor: 'transparent',\n            overflow: 'hidden',\n            transform: [\n              {\n                rotate: this.state.rotation.interpolate({\n                  inputRange: [0, 1],\n                  outputRange: ['0deg', `${directionFactor * 360}deg`],\n                }),\n              },\n            ],\n          },\n        ]}\n      >\n        <ARTSurface width={size} height={size}>\n          <AnimatedArc\n            direction={\n              direction === 'counter-clockwise'\n                ? 'clockwise'\n                : 'counter-clockwise'\n            }\n            radius={radius}\n            stroke={Array.isArray(color) ? color[this.state.colorIndex] : color}\n            offset={offset}\n            startAngle={this.state.startAngle}\n            endAngle={this.state.endAngle}\n            strokeCap={strokeCap}\n            strokeWidth={thickness}\n          />\n        </ARTSurface>\n        {children}\n      </Animated.View>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}