{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.likeDislikeCommentOnMemory = exports.addCommentToMemory = exports.likeDislikeMemory = exports.updateMemoryById = exports.getMemoryTags = exports.saveMemory = exports.getMemories = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _firestore = _interopRequireDefault(require(\"@react-native-firebase/firestore\"));\n\nvar _storage = _interopRequireDefault(require(\"@react-native-firebase/storage\"));\n\nvar _auth = _interopRequireDefault(require(\"@react-native-firebase/auth\"));\n\nvar addCommentToMemory = function addCommentToMemory(message, memoryData, user) {\n  var now, memoriesRef, data;\n  return _regenerator.default.async(function addCommentToMemory$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          now = Date.now();\n          memoriesRef = (0, _firestore.default)().collection('memoryComments').doc();\n          data = {\n            memoryId: memoryData.id,\n            message: message,\n            createdAt: now,\n            updatedAt: now,\n            likedByUsers: \"\",\n            userAvatar: user == null ? void 0 : user.displayPhoto,\n            userName: user == null ? void 0 : user.name\n          };\n          _context.next = 6;\n          return _regenerator.default.awrap(memoriesRef.set(data));\n\n        case 6:\n          _context.next = 8;\n          return _regenerator.default.awrap(updateMemoryById(memoryData.id, {\n            commentsCounter: memoryData.commentsCounter ? memoryData.commentsCounter + 1 : 1,\n            updatedAt: Date.now()\n          }));\n\n        case 8:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](0);\n          return _context.abrupt(\"return\", _context.t0);\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 11]], Promise);\n};\n\nexports.addCommentToMemory = addCommentToMemory;\n\nvar likeDislikeCommentOnMemory = function likeDislikeCommentOnMemory(commentData) {\n  var _auth$currentUser, _likedByUsers, _likedByUsers2, userId, id, _commentData$likedByU, likedByUsers, rest, index, memoriesRef;\n\n  return _regenerator.default.async(function likeDislikeCommentOnMemory$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          userId = (_auth$currentUser = (0, _auth.default)().currentUser) == null ? void 0 : _auth$currentUser.uid;\n          id = commentData.id, _commentData$likedByU = commentData.likedByUsers, likedByUsers = _commentData$likedByU === void 0 ? '' : _commentData$likedByU, rest = (0, _objectWithoutProperties2.default)(commentData, [\"id\", \"likedByUsers\"]);\n          likedByUsers = (_likedByUsers = likedByUsers) == null ? void 0 : _likedByUsers.split();\n          index = (_likedByUsers2 = likedByUsers) == null ? void 0 : _likedByUsers2.indexOf(userId);\n\n          if (userId && index > -1) {\n            likedByUsers.splice(index, 1);\n            likedByUsers = likedByUsers.join();\n          } else if (userId) {\n            likedByUsers = likedByUsers.join();\n            likedByUsers = likedByUsers ? likedByUsers + ',' + userId : userId + \"\";\n          }\n\n          memoriesRef = (0, _firestore.default)().collection('memoryComments').doc(id);\n          console.log('likedByUsers', likedByUsers);\n          _context2.next = 10;\n          return _regenerator.default.awrap(memoriesRef.update({\n            likedByUsers: likedByUsers\n          }));\n\n        case 10:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 13:\n          _context2.prev = 13;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          return _context2.abrupt(\"return\", _context2.t0);\n\n        case 17:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 13]], Promise);\n};\n\nexports.likeDislikeCommentOnMemory = likeDislikeCommentOnMemory;\n\nvar likeDislikeMemory = function likeDislikeMemory(memoryData) {\n  var _auth$currentUser2, _likedByUsers3, _likedByUsers4, userId, id, _memoryData$likedByUs, likedByUsers, rest, index;\n\n  return _regenerator.default.async(function likeDislikeMemory$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          userId = (_auth$currentUser2 = (0, _auth.default)().currentUser) == null ? void 0 : _auth$currentUser2.uid;\n          id = memoryData.id, _memoryData$likedByUs = memoryData.likedByUsers, likedByUsers = _memoryData$likedByUs === void 0 ? '' : _memoryData$likedByUs, rest = (0, _objectWithoutProperties2.default)(memoryData, [\"id\", \"likedByUsers\"]);\n          likedByUsers = (_likedByUsers3 = likedByUsers) == null ? void 0 : _likedByUsers3.split();\n          index = (_likedByUsers4 = likedByUsers) == null ? void 0 : _likedByUsers4.indexOf(userId);\n\n          if (!(userId && index > -1)) {\n            _context3.next = 12;\n            break;\n          }\n\n          likedByUsers.splice(index, 1);\n          _context3.next = 9;\n          return _regenerator.default.awrap(updateMemoryById(memoryData.id, (0, _extends2.default)({}, rest, {\n            likedByUsers: likedByUsers ? likedByUsers.join() : '',\n            updatedAt: Date.now()\n          })));\n\n        case 9:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 12:\n          if (!userId) {\n            _context3.next = 18;\n            break;\n          }\n\n          likedByUsers = likedByUsers.join();\n          likedByUsers = likedByUsers ? likedByUsers + ',' + userId : userId + \"\";\n          _context3.next = 17;\n          return _regenerator.default.awrap(updateMemoryById(memoryData.id, (0, _extends2.default)({}, rest, {\n            likedByUsers: likedByUsers,\n            updatedAt: Date.now()\n          })));\n\n        case 17:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 18:\n          _context3.next = 24;\n          break;\n\n        case 20:\n          _context3.prev = 20;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          return _context3.abrupt(\"return\", _context3.t0);\n\n        case 24:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 20]], Promise);\n};\n\nexports.likeDislikeMemory = likeDislikeMemory;\n\nvar getMemoryTags = function getMemoryTags() {\n  return _regenerator.default.async(function getMemoryTags$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regenerator.default.awrap((0, _firestore.default)().collection('memoryTags').get().then(FORMAT_DATA).catch(function (e) {\n            return e;\n          }));\n\n        case 2:\n          return _context4.abrupt(\"return\", _context4.sent);\n\n        case 3:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexports.getMemoryTags = getMemoryTags;\n\nvar updateMemoryById = function updateMemoryById(id, data) {\n  var memoriesRef;\n  return _regenerator.default.async(function updateMemoryById$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          memoriesRef = (0, _firestore.default)().collection('memories').doc(id);\n          _context5.next = 4;\n          return _regenerator.default.awrap(memoriesRef.update(data));\n\n        case 4:\n          return _context5.abrupt(\"return\", true);\n\n        case 7:\n          _context5.prev = 7;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          return _context5.abrupt(\"return\", false);\n\n        case 11:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n};\n\nexports.updateMemoryById = updateMemoryById;\n\nvar saveMemory = function saveMemory(data) {\n  var now, _data, userId, memoImageReference, memoriesRef;\n\n  return _regenerator.default.async(function saveMemory$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          now = Date.now();\n          _data = data, userId = _data.userId;\n          memoImageReference = (0, _storage.default)().ref(\"memoriesImages/memo-\" + userId + \"-\" + now + \".png\");\n          _context6.next = 6;\n          return _regenerator.default.awrap(memoImageReference.putFile(data.image));\n\n        case 6:\n          _context6.next = 8;\n          return _regenerator.default.awrap(memoImageReference.getDownloadURL());\n\n        case 8:\n          data.image = _context6.sent;\n          memoriesRef = (0, _firestore.default)().collection('memories').doc();\n          data = (0, _extends2.default)({}, data, {\n            createdAt: now,\n            updatedAt: now,\n            likedByUsers: \"\",\n            commentsCounter: 0\n          });\n          _context6.next = 13;\n          return _regenerator.default.awrap(memoriesRef.set(data));\n\n        case 13:\n          return _context6.abrupt(\"return\", data);\n\n        case 16:\n          _context6.prev = 16;\n          _context6.t0 = _context6[\"catch\"](0);\n          return _context6.abrupt(\"return\", _context6.t0);\n\n        case 19:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, [[0, 16]], Promise);\n};\n\nexports.saveMemory = saveMemory;\n\nvar getMemories = function getMemories() {\n  return _regenerator.default.async(function getMemories$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return _regenerator.default.awrap((0, _firestore.default)().collection('memories').get().then(FORMAT_DATA).catch(function (e) {\n            return e;\n          }));\n\n        case 2:\n          return _context7.abrupt(\"return\", _context7.sent);\n\n        case 3:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexports.getMemories = getMemories;\n\nfunction FORMAT_DATA(querySnapshot) {\n  var res = [];\n  querySnapshot.forEach(function (documentSnapshot) {\n    return res.push((0, _extends2.default)({}, documentSnapshot.data(), {\n      id: documentSnapshot.id\n    }));\n  });\n  return res;\n}","map":{"version":3,"sources":["C:/Program Files/nodejs/ComeClosely/app/services/memories.ts"],"names":["addCommentToMemory","message","memoryData","user","now","Date","memoriesRef","collection","doc","data","memoryId","id","createdAt","updatedAt","likedByUsers","userAvatar","displayPhoto","userName","name","set","updateMemoryById","commentsCounter","likeDislikeCommentOnMemory","commentData","userId","currentUser","uid","rest","split","index","indexOf","splice","join","console","log","update","error","likeDislikeMemory","getMemoryTags","get","then","FORMAT_DATA","catch","e","saveMemory","memoImageReference","ref","putFile","image","getDownloadURL","getMemories","querySnapshot","res","forEach","documentSnapshot","push"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAOA,IAAMA,kBAAkB,GAAG,SAArBA,kBAAqB,CAAOC,OAAP,EAAwBC,UAAxB,EAAyCC,IAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEbC,UAAAA,GAFa,GAEPC,IAAI,CAACD,GAAL,EAFO;AAGbE,UAAAA,WAHa,GAGC,0BAAYC,UAAZ,CAAuB,gBAAvB,EAAyCC,GAAzC,EAHD;AAIfC,UAAAA,IAJe,GAIH;AACZC,YAAAA,QAAQ,EAAER,UAAU,CAACS,EADT;AAEZV,YAAAA,OAAO,EAAPA,OAFY;AAGZW,YAAAA,SAAS,EAAER,GAHC;AAIZS,YAAAA,SAAS,EAAET,GAJC;AAKZU,YAAAA,YAAY,EAAE,EALF;AAMZC,YAAAA,UAAU,EAAEZ,IAAF,oBAAEA,IAAI,CAAEa,YANN;AAOZC,YAAAA,QAAQ,EAAEd,IAAF,oBAAEA,IAAI,CAAEe;AAPJ,WAJG;AAAA;AAAA,4CAabZ,WAAW,CAACa,GAAZ,CAAgBV,IAAhB,CAba;;AAAA;AAAA;AAAA,4CAcNW,gBAAgB,CAAClB,UAAU,CAACS,EAAZ,EAAgB;AACzCU,YAAAA,eAAe,EAAEnB,UAAU,CAACmB,eAAX,GAA6BnB,UAAU,CAACmB,eAAX,GAA6B,CAA1D,GAA8D,CADtC;AAEzCR,YAAAA,SAAS,EAAER,IAAI,CAACD,GAAL;AAF8B,WAAhB,CAdV;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA3B;;;;AAsBA,IAAMkB,0BAA0B,GAAG,SAA7BA,0BAA6B,CAAOC,WAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEvBC,UAAAA,MAFuB,wBAEd,qBAAOC,WAFO,qBAEd,kBAAoBC,GAFN;AAGrBf,UAAAA,EAHqB,GAGcY,WAHd,CAGrBZ,EAHqB,0BAGcY,WAHd,CAGjBT,YAHiB,EAGjBA,YAHiB,sCAGF,EAHE,0BAGKa,IAHL,0CAGcJ,WAHd;AAI3BT,UAAAA,YAAY,oBAAGA,YAAH,qBAAG,cAAcc,KAAd,EAAf;AACMC,UAAAA,KALqB,qBAKbf,YALa,qBAKb,eAAcgB,OAAd,CAAsBN,MAAtB,CALa;;AAM3B,cAAIA,MAAM,IAAIK,KAAK,GAAG,CAAC,CAAvB,EAA0B;AACtBf,YAAAA,YAAY,CAACiB,MAAb,CAAoBF,KAApB,EAA2B,CAA3B;AACAf,YAAAA,YAAY,GAAGA,YAAY,CAACkB,IAAb,EAAf;AACH,WAHD,MAIK,IAAIR,MAAJ,EAAY;AACbV,YAAAA,YAAY,GAAGA,YAAY,CAACkB,IAAb,EAAf;AACAlB,YAAAA,YAAY,GAAGA,YAAY,GAAIA,YAAY,GAAG,GAAf,GAAqBU,MAAzB,GAAoCA,MAAM,GAAG,EAAxE;AACH;;AACKlB,UAAAA,WAdqB,GAcP,0BAAYC,UAAZ,CAAuB,gBAAvB,EAAyCC,GAAzC,CAA6CG,EAA7C,CAdO;AAe3BsB,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BpB,YAA5B;AAf2B;AAAA,4CAgBdR,WAAW,CAAC6B,MAAZ,CAAmB;AAAErB,YAAAA,YAAY,EAAZA;AAAF,WAAnB,CAhBc;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAkB3BmB,UAAAA,OAAO,CAACG,KAAR;AAlB2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnC;;;;AAsBA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAOnC,UAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEdsB,UAAAA,MAFc,yBAEL,qBAAOC,WAFF,qBAEL,mBAAoBC,GAFf;AAGZf,UAAAA,EAHY,GAGuBT,UAHvB,CAGZS,EAHY,0BAGuBT,UAHvB,CAGRY,YAHQ,EAGRA,YAHQ,sCAGO,EAHP,0BAGca,IAHd,0CAGuBzB,UAHvB;AAIlBY,UAAAA,YAAY,qBAAGA,YAAH,qBAAG,eAAcc,KAAd,EAAf;AACMC,UAAAA,KALY,qBAKJf,YALI,qBAKJ,eAAcgB,OAAd,CAAsBN,MAAtB,CALI;;AAAA,gBAMdA,MAAM,IAAIK,KAAK,GAAG,CAAC,CANL;AAAA;AAAA;AAAA;;AAQdf,UAAAA,YAAY,CAACiB,MAAb,CAAoBF,KAApB,EAA2B,CAA3B;AARc;AAAA,4CASDT,gBAAgB,CAAClB,UAAU,CAACS,EAAZ,6BACtBgB,IADsB;AAEzBb,YAAAA,YAAY,EAAEA,YAAY,GAAGA,YAAY,CAACkB,IAAb,EAAH,GAAyB,EAF1B;AAGzBnB,YAAAA,SAAS,EAAER,IAAI,CAACD,GAAL;AAHc,aATf;;AAAA;AAAA;;AAAA;AAAA,eAeToB,MAfS;AAAA;AAAA;AAAA;;AAgBdV,UAAAA,YAAY,GAAGA,YAAY,CAACkB,IAAb,EAAf;AACAlB,UAAAA,YAAY,GAAGA,YAAY,GAAIA,YAAY,GAAG,GAAf,GAAqBU,MAAzB,GAAoCA,MAAM,GAAG,EAAxE;AAjBc;AAAA,4CAkBDJ,gBAAgB,CAAClB,UAAU,CAACS,EAAZ,6BACtBgB,IADsB;AAEzBb,YAAAA,YAAY,EAAZA,YAFyB;AAGzBD,YAAAA,SAAS,EAAER,IAAI,CAACD,GAAL;AAHc,aAlBf;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAyBlB6B,UAAAA,OAAO,CAACG,KAAR;AAzBkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA1B;;;;AA6BA,IAAME,aAAa,GAAG,SAAhBA,aAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CACL,0BACR/B,UADQ,CACG,YADH,EAERgC,GAFQ,GAGRC,IAHQ,CAGHC,WAHG,EAIRC,KAJQ,CAIF,UAAAC,CAAC;AAAA,mBAAIA,CAAJ;AAAA,WAJC,CADK;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB;;;;AAOA,IAAMvB,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAOT,EAAP,EAAmBF,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEXH,UAAAA,WAFW,GAEG,0BAAYC,UAAZ,CAAuB,UAAvB,EAAmCC,GAAnC,CAAuCG,EAAvC,CAFH;AAAA;AAAA,4CAGXL,WAAW,CAAC6B,MAAZ,CAAmB1B,IAAnB,CAHW;;AAAA;AAAA,4CAIV,IAJU;;AAAA;AAAA;AAAA;AAMjBwB,UAAAA,OAAO,CAACG,KAAR;AANiB,4CAOV,KAPU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB;;;;AAUA,IAAMQ,UAAU,GAAG,SAAbA,UAAa,CAAOnC,IAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAELL,UAAAA,GAFK,GAECC,IAAI,CAACD,GAAL,EAFD;AAAA,kBAGQK,IAHR,EAGHe,MAHG,SAGHA,MAHG;AAILqB,UAAAA,kBAJK,GAIgB,wBAAUC,GAAV,0BAAqCtB,MAArC,SAA+CpB,GAA/C,UAJhB;AAAA;AAAA,4CAKLyC,kBAAkB,CAACE,OAAnB,CAA2BtC,IAAI,CAACuC,KAAhC,CALK;;AAAA;AAAA;AAAA,4CAMQH,kBAAkB,CAACI,cAAnB,EANR;;AAAA;AAMXxC,UAAAA,IAAI,CAACuC,KANM;AAOL1C,UAAAA,WAPK,GAOS,0BAAYC,UAAZ,CAAuB,UAAvB,EAAmCC,GAAnC,EAPT;AAQXC,UAAAA,IAAI,8BACGA,IADH;AAEAG,YAAAA,SAAS,EAAER,GAFX;AAGAS,YAAAA,SAAS,EAAET,GAHX;AAIAU,YAAAA,YAAY,EAAE,EAJd;AAKAO,YAAAA,eAAe,EAAE;AALjB,YAAJ;AARW;AAAA,4CAeLf,WAAW,CAACa,GAAZ,CAAgBV,IAAhB,CAfK;;AAAA;AAAA,4CAkBJA,IAlBI;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;;;AAuBA,IAAMyC,WAAW,GAAG,SAAdA,WAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CACH,0BACR3C,UADQ,CACG,UADH,EAERgC,GAFQ,GAGRC,IAHQ,CAGHC,WAHG,EAIRC,KAJQ,CAIF,UAAAC,CAAC;AAAA,mBAAIA,CAAJ;AAAA,WAJC,CADG;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB;;;;AAQA,SAASF,WAAT,CAAqBU,aAArB,EAAyC;AACrC,MAAIC,GAAU,GAAG,EAAjB;AACAD,EAAAA,aAAa,CAACE,OAAd,CAAsB,UAACC,gBAAD;AAAA,WAClBF,GAAG,CAACG,IAAJ,4BACOD,gBAAgB,CAAC7C,IAAjB,EADP;AAEIE,MAAAA,EAAE,EAAE2C,gBAAgB,CAAC3C;AAFzB,OADkB;AAAA,GAAtB;AAMA,SAAOyC,GAAP;AACH","sourcesContent":["import firestore from '@react-native-firebase/firestore';\r\nimport storage from '@react-native-firebase/storage';\r\nimport auth from '@react-native-firebase/auth';\r\n\r\nexport {\r\n    getMemories, saveMemory, getMemoryTags,\r\n    updateMemoryById, likeDislikeMemory, addCommentToMemory,\r\n    likeDislikeCommentOnMemory\r\n}\r\nconst addCommentToMemory = async (message: string, memoryData: any, user: any) => {\r\n    try {\r\n        const now = Date.now();\r\n        const memoriesRef = firestore().collection('memoryComments').doc();\r\n        let data: any = {\r\n            memoryId: memoryData.id,\r\n            message,\r\n            createdAt: now,\r\n            updatedAt: now,\r\n            likedByUsers: \"\",\r\n            userAvatar: user?.displayPhoto,\r\n            userName: user?.name,\r\n        };\r\n        await memoriesRef.set(data)\r\n        return await updateMemoryById(memoryData.id, {\r\n            commentsCounter: memoryData.commentsCounter ? memoryData.commentsCounter + 1 : 1,\r\n            updatedAt: Date.now()\r\n        })\r\n    } catch (error) {\r\n        return error\r\n    }\r\n}\r\nconst likeDislikeCommentOnMemory = async (commentData: any) => {\r\n    try {\r\n        let userId = auth().currentUser?.uid\r\n        let { id, likedByUsers = '', ...rest } = commentData;\r\n        likedByUsers = likedByUsers?.split()\r\n        const index = likedByUsers?.indexOf(userId);\r\n        if (userId && index > -1) {//dislike  \r\n            likedByUsers.splice(index, 1);\r\n            likedByUsers = likedByUsers.join()\r\n        }\r\n        else if (userId) {//like  \r\n            likedByUsers = likedByUsers.join()\r\n            likedByUsers = likedByUsers ? (likedByUsers + ',' + userId) : (userId + \"\");\r\n        }\r\n        const memoriesRef = firestore().collection('memoryComments').doc(id);\r\n        console.log('likedByUsers', likedByUsers)\r\n        return await memoriesRef.update({ likedByUsers })\r\n    } catch (error) {\r\n        console.error(error)\r\n        return error;\r\n    }\r\n}\r\nconst likeDislikeMemory = async (memoryData: any) => {\r\n    try {\r\n        let userId = auth().currentUser?.uid\r\n        let { id, likedByUsers = '', ...rest } = memoryData;\r\n        likedByUsers = likedByUsers?.split()\r\n        const index = likedByUsers?.indexOf(userId);\r\n        if (userId && index > -1) {//like \r\n            // console.error(likedByUsers)\r\n            likedByUsers.splice(index, 1);\r\n            return await updateMemoryById(memoryData.id, {\r\n                ...rest,\r\n                likedByUsers: likedByUsers ? likedByUsers.join() : '',\r\n                updatedAt: Date.now()\r\n            })\r\n        }\r\n        else if (userId) {//like  \r\n            likedByUsers = likedByUsers.join()\r\n            likedByUsers = likedByUsers ? (likedByUsers + ',' + userId) : (userId + \"\")\r\n            return await updateMemoryById(memoryData.id, {\r\n                ...rest,\r\n                likedByUsers,\r\n                updatedAt: Date.now()\r\n            })\r\n        }\r\n    } catch (error) {\r\n        console.error(error)\r\n        return error;\r\n    }\r\n}\r\nconst getMemoryTags = async () => {\r\n    return await firestore()\r\n        .collection('memoryTags')\r\n        .get()\r\n        .then(FORMAT_DATA)\r\n        .catch(e => e)\r\n}\r\nconst updateMemoryById = async (id: string, data: any) => {\r\n    try {\r\n        const memoriesRef = firestore().collection('memories').doc(id);\r\n        await memoriesRef.update(data)\r\n        return true;\r\n    } catch (error) {\r\n        console.error(error)\r\n        return false;\r\n    }\r\n}\r\nconst saveMemory = async (data: any) => {\r\n    try {\r\n        const now = Date.now();\r\n        const { userId } = data;\r\n        const memoImageReference = storage().ref(`memoriesImages/memo-${userId}-${now}.png`);\r\n        await memoImageReference.putFile(data.image);\r\n        data.image = await memoImageReference.getDownloadURL();\r\n        const memoriesRef = firestore().collection('memories').doc();\r\n        data = {\r\n            ...data,\r\n            createdAt: now,\r\n            updatedAt: now,\r\n            likedByUsers: \"\",\r\n            commentsCounter: 0\r\n        };\r\n        await memoriesRef.set(data);\r\n        // firestore().collection('memoriesLikes').doc(memoriesRef.id).set([])\r\n        // firestore().collection('memoriesComments').doc(memoriesRef.id).set([])\r\n        return data;\r\n    } catch (error) {\r\n        return error\r\n    }\r\n}\r\nconst getMemories = async () => {\r\n    return await firestore()\r\n        .collection('memories')\r\n        .get()\r\n        .then(FORMAT_DATA)\r\n        .catch(e => e)\r\n}\r\n\r\nfunction FORMAT_DATA(querySnapshot: any) {\r\n    let res: any[] = [];\r\n    querySnapshot.forEach((documentSnapshot: any) => (\r\n        res.push({\r\n            ...documentSnapshot.data(),\r\n            id: documentSnapshot.id,\r\n        })\r\n    ));\r\n    return res;\r\n}"]},"metadata":{},"sourceType":"script"}