{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _common = require(\"@react-native-firebase/app/lib/common\");\n\nvar _StorageStatics = _interopRequireDefault(require(\"./StorageStatics\"));\n\nvar TASK_ID = 0;\n\nfunction wrapErrorEventListener(listenerFn, unsubscribe) {\n  return function (event) {\n    if (unsubscribe) {\n      setTimeout(function () {\n        return unsubscribe();\n      }, 0);\n    }\n\n    if ((0, _common.isFunction)(listenerFn)) {\n      listenerFn(event.error);\n    }\n  };\n}\n\nfunction wrapSnapshotEventListener(task, listenerFn, unsubscribe) {\n  if (!(0, _common.isFunction)(listenerFn)) {\n    return null;\n  }\n\n  return function (event) {\n    if (unsubscribe) {\n      setTimeout(function () {\n        return unsubscribe();\n      }, 0);\n    }\n\n    if ((0, _common.isFunction)(listenerFn)) {\n      var snapshot = (0, _extends2.default)({}, event);\n      snapshot.task = task;\n      snapshot.ref = task._ref;\n\n      if (snapshot.metadata) {\n        if (!snapshot.metadata.generation) {\n          snapshot.metadata.generation = '';\n        }\n\n        if (!snapshot.metadata.bucket) {\n          snapshot.metadata.bucket = task._ref.bucket;\n        }\n\n        if (!snapshot.metadata.metageneration) {\n          snapshot.metadata.metageneration = '';\n        }\n      }\n\n      Object.freeze(snapshot);\n      task._snapshot = snapshot;\n      listenerFn(snapshot);\n    }\n  };\n}\n\nfunction addTaskEventListener(task, eventName, listener) {\n  var _eventName = eventName;\n\n  if (_eventName !== _StorageStatics.default.TaskEvent.STATE_CHANGED) {\n    _eventName = task._type + \"_\" + eventName;\n  }\n\n  return task._storage.emitter.addListener(task._storage.eventNameForApp(task._id, _eventName), listener);\n}\n\nfunction subscribeToEvents(task, nextOrObserver, error, complete) {\n  var _error;\n\n  var _errorSubscription;\n\n  var _next;\n\n  var _nextSubscription;\n\n  var _complete;\n\n  var _completeSubscription;\n\n  var unsubscribe = function unsubscribe() {\n    if (_nextSubscription) {\n      _nextSubscription.remove();\n    }\n\n    if (_errorSubscription) {\n      _errorSubscription.remove();\n    }\n\n    if (_completeSubscription) {\n      _completeSubscription.remove();\n    }\n  };\n\n  if ((0, _common.isFunction)(nextOrObserver)) {\n    _error = wrapErrorEventListener(error, unsubscribe);\n    _next = wrapSnapshotEventListener(task, nextOrObserver);\n    _complete = wrapSnapshotEventListener(task, complete, unsubscribe);\n  } else if ((0, _common.isObject)(nextOrObserver)) {\n    _error = wrapErrorEventListener(nextOrObserver.error, unsubscribe);\n    _next = wrapSnapshotEventListener(task, nextOrObserver.next);\n    _complete = wrapSnapshotEventListener(task, nextOrObserver.complete, unsubscribe);\n  } else if ((0, _common.isNull)(nextOrObserver)) {\n    _error = wrapErrorEventListener(error, unsubscribe);\n    _complete = wrapSnapshotEventListener(task, complete, unsubscribe);\n  } else {\n    throw new Error(\"firebase.storage.StorageTask.on(*, _) 'nextOrObserver' must be a Function, an Object or Null.\");\n  }\n\n  if (_next) {\n    _nextSubscription = addTaskEventListener(task, _StorageStatics.default.TaskEvent.STATE_CHANGED, _next);\n  }\n\n  if (_error) {\n    _errorSubscription = addTaskEventListener(task, 'failure', _error);\n  }\n\n  if (_complete) {\n    _completeSubscription = addTaskEventListener(task, 'success', _complete);\n  }\n\n  return unsubscribe;\n}\n\nvar StorageTask = function () {\n  function StorageTask(type, storageRef, beginTaskFn) {\n    (0, _classCallCheck2.default)(this, StorageTask);\n    this._type = type;\n    this._id = TASK_ID++;\n    this._promise = null;\n    this._ref = storageRef;\n    this._beginTask = beginTaskFn;\n    this._storage = storageRef._storage;\n    this._snapshot = null;\n  }\n\n  (0, _createClass2.default)(StorageTask, [{\n    key: \"on\",\n    value: function on(event, nextOrObserver, error, complete) {\n      if (event !== _StorageStatics.default.TaskEvent.STATE_CHANGED) {\n        throw new Error(\"firebase.storage.StorageTask.on event argument must be a string with a value of '\" + _StorageStatics.default.TaskEvent.STATE_CHANGED + \"'\");\n      }\n\n      if (!this._promise) {\n        this._promise = this._beginTask(this);\n      }\n\n      if (!nextOrObserver && !error && !complete) {\n        return subscribeToEvents.bind(null, this);\n      }\n\n      return subscribeToEvents(this, nextOrObserver, error, complete);\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      return this._storage.native.setTaskStatus(this._id, 0);\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      return this._storage.native.setTaskStatus(this._id, 1);\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      return this._storage.native.setTaskStatus(this._id, 2);\n    }\n  }, {\n    key: \"then\",\n    get: function get() {\n      var _this = this;\n\n      if (!this._promise) {\n        this._promise = this._beginTask(this);\n      }\n\n      return new Promise(function (resolve, reject) {\n        var boundPromise = _this._promise.then.bind(_this._promise);\n\n        boundPromise(function (response) {\n          _this._snapshot = (0, _extends2.default)({}, response, {\n            ref: _this._ref,\n            task: _this\n          });\n          resolve(response);\n        }).catch(function (error) {\n          reject(error);\n        });\n      }).then.bind(this._promise);\n    }\n  }, {\n    key: \"catch\",\n    get: function get() {\n      if (!this._promise) {\n        this._promise = this._beginTask(this);\n      }\n\n      return this._promise.catch.bind(this._promise);\n    }\n  }, {\n    key: \"snapshot\",\n    get: function get() {\n      return this._snapshot;\n    }\n  }]);\n  return StorageTask;\n}();\n\nexports.default = StorageTask;","map":{"version":3,"sources":["C:/Program Files/nodejs/ComeClosely/node_modules/@react-native-firebase/storage/lib/StorageTask.js"],"names":["TASK_ID","wrapErrorEventListener","listenerFn","unsubscribe","event","setTimeout","error","wrapSnapshotEventListener","task","snapshot","ref","_ref","metadata","generation","bucket","metageneration","Object","freeze","_snapshot","addTaskEventListener","eventName","listener","_eventName","StorageStatics","TaskEvent","STATE_CHANGED","_type","_storage","emitter","addListener","eventNameForApp","_id","subscribeToEvents","nextOrObserver","complete","_error","_errorSubscription","_next","_nextSubscription","_complete","_completeSubscription","remove","next","Error","StorageTask","type","storageRef","beginTaskFn","_promise","_beginTask","bind","native","setTaskStatus","Promise","resolve","reject","boundPromise","then","response","catch"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isFunction, isNull, isObject } from '@react-native-firebase/app/lib/common';\nimport StorageStatics from './StorageStatics';\n\nlet TASK_ID = 0;\n\nfunction wrapErrorEventListener(listenerFn, unsubscribe) {\n  return event => {\n    if (unsubscribe) {\n      setTimeout(() => unsubscribe(), 0);\n    } // 1 frame = 16ms, pushing to next frame\n    if (isFunction(listenerFn)) {\n      listenerFn(event.error);\n    }\n  };\n}\n\nfunction wrapSnapshotEventListener(task, listenerFn, unsubscribe) {\n  if (!isFunction(listenerFn)) {\n    return null;\n  }\n  return event => {\n    if (unsubscribe) {\n      setTimeout(() => unsubscribe(), 0);\n    } // 1 frame = 16ms, pushing to next frame\n    if (isFunction(listenerFn)) {\n      const snapshot = Object.assign({}, event);\n      snapshot.task = task;\n      snapshot.ref = task._ref;\n\n      if (snapshot.metadata) {\n        if (!snapshot.metadata.generation) {\n          snapshot.metadata.generation = '';\n        }\n        if (!snapshot.metadata.bucket) {\n          snapshot.metadata.bucket = task._ref.bucket;\n        }\n        if (!snapshot.metadata.metageneration) {\n          snapshot.metadata.metageneration = '';\n        }\n        // // TODO(salakar): these are always here, cannot repro without, remove in 6.1.0 if no issues:\n        // if (!snapshot.metadata.name) snapshot.metadata.name = task._ref.name;\n        // if (!snapshot.metadata.fullPath) snapshot.metadata.fullPath = task._ref.fullPath;\n      }\n\n      Object.freeze(snapshot);\n      task._snapshot = snapshot;\n\n      listenerFn(snapshot);\n    }\n  };\n}\n\nfunction addTaskEventListener(task, eventName, listener) {\n  let _eventName = eventName;\n  if (_eventName !== StorageStatics.TaskEvent.STATE_CHANGED) {\n    _eventName = `${task._type}_${eventName}`;\n  }\n\n  return task._storage.emitter.addListener(\n    task._storage.eventNameForApp(task._id, _eventName),\n    listener,\n  );\n}\n\nfunction subscribeToEvents(task, nextOrObserver, error, complete) {\n  let _error;\n  let _errorSubscription;\n\n  let _next;\n  let _nextSubscription;\n\n  let _complete;\n  let _completeSubscription;\n\n  const unsubscribe = () => {\n    if (_nextSubscription) {\n      _nextSubscription.remove();\n    }\n    if (_errorSubscription) {\n      _errorSubscription.remove();\n    }\n    if (_completeSubscription) {\n      _completeSubscription.remove();\n    }\n  };\n\n  if (isFunction(nextOrObserver)) {\n    _error = wrapErrorEventListener(error, unsubscribe);\n    _next = wrapSnapshotEventListener(task, nextOrObserver);\n    _complete = wrapSnapshotEventListener(task, complete, unsubscribe);\n  } else if (isObject(nextOrObserver)) {\n    _error = wrapErrorEventListener(nextOrObserver.error, unsubscribe);\n    _next = wrapSnapshotEventListener(task, nextOrObserver.next);\n    _complete = wrapSnapshotEventListener(task, nextOrObserver.complete, unsubscribe);\n  } else if (isNull(nextOrObserver)) {\n    _error = wrapErrorEventListener(error, unsubscribe);\n    _complete = wrapSnapshotEventListener(task, complete, unsubscribe);\n  } else {\n    throw new Error(\n      \"firebase.storage.StorageTask.on(*, _) 'nextOrObserver' must be a Function, an Object or Null.\",\n    );\n  }\n\n  if (_next) {\n    _nextSubscription = addTaskEventListener(task, StorageStatics.TaskEvent.STATE_CHANGED, _next);\n  }\n\n  if (_error) {\n    _errorSubscription = addTaskEventListener(task, 'failure', _error);\n  }\n\n  if (_complete) {\n    _completeSubscription = addTaskEventListener(task, 'success', _complete);\n  }\n\n  return unsubscribe;\n}\n\nexport default class StorageTask {\n  constructor(type, storageRef, beginTaskFn) {\n    this._type = type;\n    this._id = TASK_ID++;\n    this._promise = null;\n    this._ref = storageRef;\n    this._beginTask = beginTaskFn;\n    this._storage = storageRef._storage;\n    this._snapshot = null;\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.UploadTask#then\n   */\n  get then() {\n    if (!this._promise) {\n      this._promise = this._beginTask(this);\n    }\n\n    return new Promise((resolve, reject) => {\n      const boundPromise = this._promise.then.bind(this._promise);\n\n      boundPromise(response => {\n        this._snapshot = { ...response, ref: this._ref, task: this };\n        resolve(response);\n      }).catch(error => {\n        reject(error);\n      });\n    }).then.bind(this._promise);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.UploadTask#catch\n   */\n  get catch() {\n    if (!this._promise) {\n      this._promise = this._beginTask(this);\n    }\n    return this._promise.catch.bind(this._promise);\n  }\n\n  get snapshot() {\n    return this._snapshot;\n  }\n\n  // // NOT on Web SDK\n  // /**\n  //  * @url https://firebase.google.com/docs/reference/js/firebase.storage.UploadTask#finally\n  //  */\n  // get finally() {\n  //   if (!this._promise) this._promise = this._beginTask(this);\n  //   return this._promise.finally.bind(this._promise);\n  // }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.UploadTask#on\n   */\n  on(event, nextOrObserver, error, complete) {\n    if (event !== StorageStatics.TaskEvent.STATE_CHANGED) {\n      throw new Error(\n        `firebase.storage.StorageTask.on event argument must be a string with a value of '${StorageStatics.TaskEvent.STATE_CHANGED}'`,\n      );\n    }\n\n    if (!this._promise) {\n      this._promise = this._beginTask(this);\n    }\n\n    // if only event provided return the subscriber function\n    if (!nextOrObserver && !error && !complete) {\n      return subscribeToEvents.bind(null, this);\n    }\n\n    return subscribeToEvents(this, nextOrObserver, error, complete);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.UploadTask#pause\n   */\n  pause() {\n    return this._storage.native.setTaskStatus(this._id, 0);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.UploadTask#resume\n   */\n  resume() {\n    return this._storage.native.setTaskStatus(this._id, 1);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.UploadTask#cancel\n   */\n  cancel() {\n    return this._storage.native.setTaskStatus(this._id, 2);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}