{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _barcodes = _interopRequireDefault(require(\"jsbarcode/src/barcodes\"));\n\nvar _art = require(\"@react-native-community/art\");\n\nvar _jsxFileName = \"C:\\\\Program Files\\\\nodejs\\\\ComeClosely\\\\node_modules\\\\react-native-barcode-builder\\\\index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar Barcode = function (_PureComponent) {\n  (0, _inherits2.default)(Barcode, _PureComponent);\n\n  var _super = _createSuper(Barcode);\n\n  function Barcode(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, Barcode);\n    _this = _super.call(this, props);\n    _this.state = {\n      bars: [],\n      barCodeWidth: 0\n    };\n    return _this;\n  }\n\n  (0, _createClass2.default)(Barcode, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.value !== this.props.value) {\n        this.update(this.props);\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.update();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var encoder = _barcodes.default[this.props.format];\n      var encoded = this.encode(this.props.value, encoder, this.props);\n\n      if (encoded) {\n        this.state.bars = this.drawSvgBarCode(encoded, this.props);\n        this.state.barCodeWidth = encoded.data.length * this.props.width;\n      }\n    }\n  }, {\n    key: \"drawSvgBarCode\",\n    value: function drawSvgBarCode(encoding) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var rects = [];\n      var binary = encoding.data;\n      var barWidth = 0;\n      var x = 0;\n      var yFrom = 0;\n\n      for (var b = 0; b < binary.length; b++) {\n        x = b * options.width;\n\n        if (binary[b] === '1') {\n          barWidth++;\n        } else if (barWidth > 0) {\n          rects[rects.length] = this.drawRect(x - options.width * barWidth, yFrom, options.width * barWidth, options.height);\n          barWidth = 0;\n        }\n      }\n\n      if (barWidth > 0) {\n        rects[rects.length] = this.drawRect(x - options.width * (barWidth - 1), yFrom, options.width * barWidth, options.height);\n      }\n\n      return rects;\n    }\n  }, {\n    key: \"drawRect\",\n    value: function drawRect(x, y, width, height) {\n      return \"M\" + x + \",\" + y + \"h\" + width + \"v\" + height + \"h-\" + width + \"z\";\n    }\n  }, {\n    key: \"getTotalWidthOfEncodings\",\n    value: function getTotalWidthOfEncodings(encodings) {\n      var totalWidth = 0;\n\n      for (var i = 0; i < encodings.length; i++) {\n        totalWidth += encodings[i].width;\n      }\n\n      return totalWidth;\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(text, Encoder, options) {\n      if (typeof text !== 'string' || text.length === 0) {\n        if (this.props.onError) {\n          this.props.onError(new Error('Barcode value must be a non-empty string'));\n          return;\n        }\n\n        throw new Error('Barcode value must be a non-empty string');\n      }\n\n      var encoder;\n\n      try {\n        encoder = new Encoder(text, options);\n      } catch (error) {\n        if (this.props.onError) {\n          this.props.onError(new Error('Invalid barcode format.'));\n          return;\n        }\n\n        throw new Error('Invalid barcode format.');\n      }\n\n      if (!encoder.valid()) {\n        if (this.props.onError) {\n          this.props.onError(new Error('Invalid barcode for selected format.'));\n          return;\n        }\n\n        throw new Error('Invalid barcode for selected format.');\n      }\n\n      var encoded = encoder.encode();\n      return encoded;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.update();\n      var backgroundStyle = {\n        backgroundColor: this.props.background\n      };\n      return _react.default.createElement(_reactNative.View, {\n        style: [styles.svgContainer, backgroundStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 7\n        }\n      }, _react.default.createElement(_art.Surface, {\n        height: this.props.height,\n        width: this.state.barCodeWidth,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 9\n        }\n      }, _react.default.createElement(_art.Shape, {\n        d: this.state.bars,\n        fill: this.props.lineColor,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }\n      })), typeof this.props.text !== 'undefined' && _react.default.createElement(_reactNative.Text, {\n        style: {\n          color: this.props.textColor,\n          width: this.state.barCodeWidth,\n          textAlign: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }\n      }, this.props.text));\n    }\n  }]);\n  return Barcode;\n}(_react.PureComponent);\n\nexports.default = Barcode;\nBarcode.propTypes = {\n  value: _propTypes.default.string,\n  format: _propTypes.default.oneOf(Object.keys(_barcodes.default)),\n  text: _propTypes.default.string,\n  width: _propTypes.default.number,\n  height: _propTypes.default.number,\n  lineColor: _propTypes.default.string,\n  textColor: _propTypes.default.string,\n  background: _propTypes.default.string,\n  onError: _propTypes.default.func\n};\nBarcode.defaultProps = {\n  value: undefined,\n  format: 'CODE128',\n  text: undefined,\n  width: 2,\n  height: 100,\n  lineColor: '#000000',\n  textColor: '#000000',\n  background: '#ffffff',\n  onError: undefined\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  svgContainer: {\n    alignItems: 'center',\n    padding: 10\n  }\n});","map":{"version":3,"sources":["C:/Program Files/nodejs/ComeClosely/node_modules/react-native-barcode-builder/index.js"],"names":["Barcode","props","state","bars","barCodeWidth","prevProps","value","update","encoder","barcodes","format","encoded","encode","drawSvgBarCode","data","length","width","encoding","options","rects","binary","barWidth","x","yFrom","b","drawRect","height","y","encodings","totalWidth","i","text","Encoder","onError","Error","error","valid","backgroundStyle","backgroundColor","background","styles","svgContainer","lineColor","color","textColor","textAlign","PureComponent","propTypes","PropTypes","string","oneOf","Object","keys","number","func","defaultProps","undefined","StyleSheet","create","alignItems","padding"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport { View, StyleSheet, Text } from 'react-native';\nimport PropTypes from 'prop-types';\n\nimport barcodes from 'jsbarcode/src/barcodes';\n\nimport {Surface, Shape} from '@react-native-community/art';\n\nexport default class Barcode extends PureComponent {\n  static propTypes = {\n    /* what the barCode stands for */\n    value: PropTypes.string,\n    /* Select which barcode type to use */\n    format: PropTypes.oneOf(Object.keys(barcodes)),\n    /* Override the text that is displayed */\n    text: PropTypes.string,\n    /* The width option is the width of a single bar. */\n    width: PropTypes.number,\n    /* The height of the barcode. */\n    height: PropTypes.number,\n    /* Set the color of the bars */\n    lineColor: PropTypes.string,\n    /* Set the color of the text. */\n    textColor: PropTypes.string,\n    /* Set the background of the barcode. */\n    background: PropTypes.string,\n    /* Handle error for invalid barcode of selected format */\n    onError: PropTypes.func\n  };\n\n  static defaultProps = {\n    value: undefined,\n    format: 'CODE128',\n    text: undefined,\n    width: 2,\n    height: 100,\n    lineColor: '#000000',\n    textColor: '#000000',\n    background: '#ffffff',\n    onError: undefined\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      bars: [],\n      barCodeWidth: 0\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.value !== this.props.value) {\n      this.update(this.props);\n    }\n  }\n\n  componentDidMount() {\n    this.update();\n  }\n\n  componentDidUpdate() {\n    this.update();\n  }\n\n  update() {\n    const encoder = barcodes[this.props.format];\n    const encoded = this.encode(this.props.value, encoder, this.props);\n\n    if (encoded) {\n      this.state.bars = this.drawSvgBarCode(encoded, this.props);\n      this.state.barCodeWidth = encoded.data.length * this.props.width;\n    }\n  }\n\n  drawSvgBarCode(encoding, options = {}) {\n    const rects = [];\n    // binary data of barcode\n    const binary = encoding.data;\n\n    let barWidth = 0;\n    let x = 0;\n    let yFrom = 0;\n    // alert(JSON.stringify(options));\n\n    for (let b = 0; b < binary.length; b++) {\n      x = b * options.width;\n      if (binary[b] === '1') {\n        barWidth++;\n      } else if (barWidth > 0) {\n        rects[rects.length] = this.drawRect(\n          x - options.width * barWidth,\n          yFrom,\n          options.width * barWidth,\n          options.height\n        );\n        barWidth = 0;\n      }\n    }\n\n    // Last draw is needed since the barcode ends with 1\n    if (barWidth > 0) {\n      rects[rects.length] = this.drawRect(\n        x - options.width * (barWidth - 1),\n        yFrom,\n        options.width * barWidth,\n        options.height\n      );\n    }\n\n    return rects;\n  }\n\n  drawRect(x, y, width, height) {\n    return `M${x},${y}h${width}v${height}h-${width}z`;\n  }\n\n  getTotalWidthOfEncodings(encodings) {\n    let totalWidth = 0;\n    for (let i = 0; i < encodings.length; i++) {\n      totalWidth += encodings[i].width;\n    }\n    return totalWidth;\n  }\n\n  // encode() handles the Encoder call and builds the binary string to be rendered\n  encode(text, Encoder, options) {\n    // If text is not a non-empty string, throw error.\n    if (typeof text !== 'string' || text.length === 0) {\n      if (this.props.onError) {\n        this.props.onError(new Error('Barcode value must be a non-empty string'));\n        return;\n      }\n      throw new Error('Barcode value must be a non-empty string');\n    }\n\n    var encoder;\n\n    try {\n      encoder = new Encoder(text, options);\n    } catch (error) {\n      // If the encoder could not be instantiated, throw error.\n      if (this.props.onError)  {\n        this.props.onError(new Error('Invalid barcode format.'));\n        return;\n      }\n      throw new Error('Invalid barcode format.');\n    }\n\n    // If the input is not valid for the encoder, throw error.\n    if (!encoder.valid()) {\n      if (this.props.onError) {\n        this.props.onError(new Error('Invalid barcode for selected format.'));\n        return;\n      }\n      throw new Error('Invalid barcode for selected format.');\n    }\n\n    // Make a request for the binary data (and other information) that should be rendered\n    // encoded structure is {\n    //  text: 'xxxxx',\n    //  data: '110100100001....'\n    // }\n    var encoded = encoder.encode();\n\n    return encoded;\n  }\n\n  render() {\n    this.update();\n    const backgroundStyle = {\n      backgroundColor: this.props.background\n    };\n    return (\n      <View style={[styles.svgContainer, backgroundStyle]}>\n        <Surface height={this.props.height} width={this.state.barCodeWidth}>\n          <Shape d={this.state.bars} fill={this.props.lineColor} />\n        </Surface>\n        { typeof (this.props.text) !== 'undefined' &&\n          <Text style={{color: this.props.textColor, width: this.state.barCodeWidth, textAlign: 'center'}} >{this.props.text}</Text>\n        }\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  svgContainer: {\n    alignItems: 'center',\n    padding: 10\n  }\n});\n"]},"metadata":{},"sourceType":"script"}