{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _reactNativeTextinputWithIcons = _interopRequireDefault(require(\"react-native-textinput-with-icons\"));\n\nvar _reactNativeImagePicker = _interopRequireDefault(require(\"react-native-image-picker\"));\n\nvar _reactNativeModalDatetimePicker = _interopRequireDefault(require(\"react-native-modal-datetime-picker\"));\n\nvar _formik = require(\"formik\");\n\nvar Yup = _interopRequireWildcard(require(\"yup\"));\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nvar _config = require(\"../../config\");\n\nvar _styles = _interopRequireDefault(require(\"./styles\"));\n\nvar _FormFieldWrapper = _interopRequireDefault(require(\"../../components/FormFieldWrapper\"));\n\nvar _MapLocationSelectionModal = _interopRequireDefault(require(\"../../components/MapLocationSelectionModal\"));\n\nvar _FormButton = _interopRequireDefault(require(\"../../components/FormButton\"));\n\nvar _event = require(\"../../../state/ducks/event\");\n\nvar _auth = require(\"../../../providers/auth\");\n\nvar _jsxFileName = \"C:\\\\Program Files\\\\nodejs\\\\ComeClosely\\\\app\\\\views\\\\screens\\\\CreateEvent\\\\index.tsx\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar INITIAL_STATE = {\n  coverPhotoSource: '',\n  coverPhotoSourcePath: undefined,\n  isDatePickerVisible: false,\n  isTimePickerVisible: false,\n  isMapViewModalVisible: false\n};\nvar INITIAL_FORM_STATE = {\n  title: '',\n  type: '',\n  location: '',\n  date: '',\n  time: '',\n  ticketsAvailable: 0,\n  ticketPrice: 0,\n  description: '',\n  otherDetails: '',\n  coverPhoto: ''\n};\nvar validationSchema = Yup.object().shape({\n  title: Yup.string().label('Title').required('Please enter title of event').min(3, 'Must have at least 3 characters').max(100, 'Must have at most 100 characters'),\n  type: Yup.string().label('Event Type').required('Please select type of event'),\n  location: Yup.string().label('Location').required('Please enter the location of event'),\n  date: Yup.string().label('Date').required('Please select date for event'),\n  time: Yup.string().label('Time').required('Please select time for event'),\n  ticketsAvailable: Yup.number().label('Number Of Tickets').required('Please enter number of tickets for event').test('non-zero-tickets', 'At least one ticket should be available', function (value) {\n    return value > 0;\n  }),\n  ticketPrice: Yup.number().label('Price Of Ticket').required('Please enter price of ticket for event').test('non-zero-tickets', 'Price should be greater than zero', function (value) {\n    return value > 0;\n  }),\n  description: Yup.string().label('Description').required('Please enter small description of event').min(5, 'Must have at least 5 characters').max(1000, 'Must have at most 1000 characters'),\n  otherDetails: Yup.string().label('Other details').required('Please enter other details of event').min(5, 'Must have at least 5 characters').max(1000, 'Must have at most 1000 characters'),\n  coverPhoto: Yup.string().label('Cover Photo').required('Please select a cover photo for event')\n});\n\nvar CreateEvent = function (_React$Component) {\n  (0, _inherits2.default)(CreateEvent, _React$Component);\n\n  var _super = _createSuper(CreateEvent);\n\n  function CreateEvent(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, CreateEvent);\n    _this = _super.call(this, props);\n\n    _this.closeTapped = function () {\n      _this.props.navigation.goBack();\n    };\n\n    _this.handleSelectEventType = function (type, formikProps) {\n      formikProps.setFieldValue('type', type);\n\n      if (!formikProps.touched.type) {\n        formikProps.setFieldTouched('type', true);\n      }\n    };\n\n    _this.showDatePicker = function () {\n      _this.setState({\n        isDatePickerVisible: true\n      });\n    };\n\n    _this.hideDatePicker = function () {\n      _this.setState({\n        isDatePickerVisible: false\n      });\n    };\n\n    _this.showTimePicker = function () {\n      _this.setState({\n        isTimePickerVisible: true\n      });\n    };\n\n    _this.hideTimePicker = function () {\n      _this.setState({\n        isTimePickerVisible: false\n      });\n    };\n\n    _this.toggleMapViewModal = function () {\n      _this.setState({\n        isMapViewModalVisible: !_this.state.isMapViewModalVisible\n      });\n    };\n\n    _this.onAddEventSuccess = function () {\n      _this.props.navigation.goBack();\n    };\n\n    _this.eventTypeListItem = function (data, formikProps) {\n      return _react.default.createElement(_reactNative.TouchableOpacity, {\n        style: [_styles.default.eventTypeItemView, {\n          backgroundColor: formikProps.values.type === data.item.name ? '#FF2485' : 'white'\n        }],\n        onPress: function onPress() {\n          return _this.handleSelectEventType(data.item.name, formikProps);\n        },\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 5\n        }\n      }, _react.default.createElement(_reactNative.Text, {\n        style: {\n          fontFamily: 'Gilroy-ExtraBold',\n          alignSelf: 'center',\n          color: formikProps.values.type === data.item.name ? 'white' : '#BEBEBE'\n        },\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 7\n        }\n      }, data.item.name));\n    };\n\n    _this.chooseFile = function (formikProps) {\n      var options = {\n        title: 'Choose Photo',\n        takePhotoButtonTitle: 'Camera',\n        chooseFromLibraryButtonTitle: 'Gallery',\n        mediaType: 'photo',\n        storageOptions: {\n          skipBackup: true,\n          path: 'images'\n        }\n      };\n\n      _reactNativeImagePicker.default.showImagePicker(options, function (response) {\n        console.log('Response = ', response);\n\n        if (response.didCancel) {\n          console.log('User cancelled image picker');\n        } else if (response.error) {\n          console.log('ImagePicker Error: ', response.error);\n        } else if (response.customButton) {\n          console.log('User tapped custom button: ', response.customButton);\n        } else {\n          _this.setState({\n            coverPhotoSource: response.uri\n          });\n\n          formikProps.setFieldValue('coverPhoto', response.path);\n        }\n      });\n    };\n\n    _this.state = (0, _extends2.default)({}, INITIAL_STATE);\n    return _this;\n  }\n\n  (0, _createClass2.default)(CreateEvent, [{\n    key: \"handleSubmit\",\n    value: function handleSubmit(values) {\n      var userId = this.context.currentUser.uid;\n      var data = (0, _extends2.default)({}, values, {\n        userId: userId\n      });\n      this.props.addEvent(data, this.onAddEventSuccess);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.getEventTypes();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          eventTypes = _this$props.eventTypes,\n          getEventTypesLoading = _this$props.getEventTypesLoading,\n          isLoading = _this$props.isLoading;\n      return _react.default.createElement(_reactNative.View, {\n        style: _styles.default.mainView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 7\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: _styles.default.bgImageView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 9\n        }\n      }, _react.default.createElement(_reactNative.Image, {\n        style: _styles.default.bgImage,\n        source: _config.AppImages.homeNavigation,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }\n      })), _react.default.createElement(_reactNative.View, {\n        style: _styles.default.overlay,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 9\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: _styles.default.titleView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }\n      }, _react.default.createElement(_reactNative.Text, {\n        style: _styles.default.title,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 13\n        }\n      }, \"Create Event\"), _react.default.createElement(_reactNative.TouchableOpacity, {\n        onPress: this.closeTapped,\n        style: _styles.default.closeIconView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 13\n        }\n      }, _react.default.createElement(_reactNative.Image, {\n        source: _config.AppImages.close,\n        style: _styles.default.closeIcon,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 15\n        }\n      })))), _react.default.createElement(_formik.Formik, {\n        initialValues: INITIAL_FORM_STATE,\n        validationSchema: validationSchema,\n        onSubmit: function onSubmit(values) {\n          _this2.handleSubmit(values);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 9\n        }\n      }, function (formikProps) {\n        return _react.default.createElement(_react.Fragment, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 13\n          }\n        }, _react.default.createElement(_reactNative.ScrollView, {\n          style: _styles.default.eventsFormMainView,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 15\n          }\n        }, _react.default.createElement(_reactNative.View, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 17\n          }\n        }, _react.default.createElement(_reactNative.View, {\n          style: _styles.default.eventsFormMainChildView,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 19\n          }\n        }, _react.default.createElement(_FormFieldWrapper.default, {\n          formikProps: formikProps,\n          formikKey: \"title\",\n          containerStyles: _styles.default.fieldWrapper,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 21\n          }\n        }, _react.default.createElement(_reactNativeTextinputWithIcons.default, {\n          style: _styles.default.textInput,\n          label: \"Title\",\n          fontFamily: \"Gilroy-SemiBold\",\n          labelColor: \"#D4D4D4\",\n          labelActiveColor: \"#BEBEBE\",\n          underlineActiveColor: \"#BEBEBE\",\n          containerMaxWidth: \"100%\",\n          value: formikProps.values.title,\n          onChangeText: formikProps.handleChange('title'),\n          onBlur: formikProps.handleBlur('title'),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 23\n          }\n        })), _react.default.createElement(_reactNative.View, {\n          style: _styles.default.eventTypeView,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 21\n          }\n        }, _react.default.createElement(_reactNative.Text, {\n          style: _styles.default.eventTypeText,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 23\n          }\n        }, \"Event Type\")), _react.default.createElement(_reactNative.View, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 21\n          }\n        }, getEventTypesLoading && _react.default.createElement(_reactNative.ActivityIndicator, {\n          size: \"small\",\n          color: \"#FF2485\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 25\n          }\n        }), !getEventTypesLoading && _react.default.createElement(_FormFieldWrapper.default, {\n          formikProps: formikProps,\n          formikKey: \"type\",\n          containerStyles: _styles.default.eventTypesView,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 25\n          }\n        }, _react.default.createElement(_reactNative.FlatList, {\n          horizontal: true,\n          showsHorizontalScrollIndicator: false,\n          legacyImplementation: false,\n          data: eventTypes,\n          renderItem: function renderItem(item) {\n            return _this2.eventTypeListItem(item, formikProps);\n          },\n          keyExtractor: function keyExtractor(item) {\n            return item.id;\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 27\n          }\n        }))), _react.default.createElement(_FormFieldWrapper.default, {\n          formikProps: formikProps,\n          formikKey: \"location\",\n          containerStyles: _styles.default.fieldWrapper,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 21\n          }\n        }, _react.default.createElement(_reactNativeTextinputWithIcons.default, {\n          style: _styles.default.textInput,\n          label: \"Location\",\n          fontFamily: \"Gilroy-SemiBold\",\n          labelColor: \"#D4D4D4\",\n          labelActiveColor: \"#BEBEBE\",\n          underlineActiveColor: \"#BEBEBE\",\n          containerMaxWidth: \"100%\",\n          value: formikProps.values.location,\n          onFocus: function onFocus() {\n            return _this2.toggleMapViewModal();\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 23\n          }\n        }), _react.default.createElement(_MapLocationSelectionModal.default, {\n          visible: _this2.state.isMapViewModalVisible,\n          coordinate: formikProps.values.location && {\n            longitude: parseFloat(formikProps.values.location.split(',')[0]),\n            latitude: parseFloat(formikProps.values.location.split(',')[1])\n          },\n          handlePosition: function handlePosition(e) {\n            formikProps.setFieldValue('location', e.nativeEvent.coordinate.longitude + ', ' + e.nativeEvent.coordinate.latitude);\n\n            _this2.toggleMapViewModal();\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 23\n          }\n        })), _react.default.createElement(_reactNative.View, {\n          style: _styles.default.dateTimeView,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 21\n          }\n        }, _react.default.createElement(_FormFieldWrapper.default, {\n          formikProps: formikProps,\n          formikKey: \"date\",\n          containerStyles: _styles.default.fieldWrapperHalf,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 23\n          }\n        }, _react.default.createElement(_reactNativeTextinputWithIcons.default, {\n          style: _styles.default.textInput,\n          label: \"Date\",\n          fontFamily: \"Gilroy-SemiBold\",\n          labelColor: \"#D4D4D4\",\n          labelActiveColor: \"#BEBEBE\",\n          underlineActiveColor: \"#BEBEBE\",\n          containerMaxWidth: \"100%\",\n          showSoftInputOnFocus: false,\n          value: formikProps.values.date,\n          onBlur: formikProps.handleBlur('date'),\n          onTouchEnd: function onTouchEnd() {\n            return _this2.showDatePicker();\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 25\n          }\n        })), _react.default.createElement(_reactNativeModalDatetimePicker.default, {\n          isVisible: _this2.state.isDatePickerVisible,\n          mode: \"date\",\n          onConfirm: function onConfirm(date) {\n            _this2.hideDatePicker();\n\n            formikProps.setFieldValue('date', (0, _moment.default)(date).format('DD MMM YYYY'));\n          },\n          onCancel: _this2.hideDatePicker,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 23\n          }\n        }), _react.default.createElement(_FormFieldWrapper.default, {\n          formikProps: formikProps,\n          formikKey: \"time\",\n          containerStyles: _styles.default.fieldWrapperHalf,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 23\n          }\n        }, _react.default.createElement(_reactNativeTextinputWithIcons.default, {\n          style: _styles.default.textInput,\n          label: \"Time\",\n          fontFamily: \"Gilroy-SemiBold\",\n          labelColor: \"#D4D4D4\",\n          labelActiveColor: \"#BEBEBE\",\n          underlineActiveColor: \"#BEBEBE\",\n          containerMaxWidth: \"100%\",\n          showSoftInputOnFocus: false,\n          value: formikProps.values.time,\n          onBlur: formikProps.handleBlur('time'),\n          onTouchEnd: function onTouchEnd() {\n            return _this2.showTimePicker();\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 25\n          }\n        })), _react.default.createElement(_reactNativeModalDatetimePicker.default, {\n          isVisible: _this2.state.isTimePickerVisible,\n          mode: \"time\",\n          onConfirm: function onConfirm(time) {\n            _this2.hideTimePicker();\n\n            formikProps.setFieldValue('time', (0, _moment.default)(time).format('hh:mm a'));\n          },\n          onCancel: _this2.hideTimePicker,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 23\n          }\n        })), _react.default.createElement(_reactNative.View, {\n          style: _styles.default.dateTimeView,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 21\n          }\n        }, _react.default.createElement(_FormFieldWrapper.default, {\n          formikProps: formikProps,\n          formikKey: \"ticketsAvailable\",\n          containerStyles: _styles.default.fieldWrapperHalf,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 23\n          }\n        }, _react.default.createElement(_reactNativeTextinputWithIcons.default, {\n          style: _styles.default.textInput,\n          label: \"Tickets available\",\n          fontFamily: \"Gilroy-SemiBold\",\n          labelColor: \"#D4D4D4\",\n          labelActiveColor: \"#BEBEBE\",\n          underlineActiveColor: \"#BEBEBE\",\n          containerMaxWidth: \"100%\",\n          keyboardType: 'phone-pad',\n          returnKeyType: _reactNative.Platform.OS === 'android' ? 'next' : 'done',\n          value: formikProps.values.ticketsAvailable,\n          onChangeText: formikProps.handleChange('ticketsAvailable'),\n          onBlur: formikProps.handleBlur('ticketsAvailable'),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 25\n          }\n        })), _react.default.createElement(_FormFieldWrapper.default, {\n          formikProps: formikProps,\n          formikKey: \"ticketPrice\",\n          containerStyles: _styles.default.fieldWrapperHalf,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 23\n          }\n        }, _react.default.createElement(_reactNativeTextinputWithIcons.default, {\n          style: _styles.default.textInput,\n          label: \"Ticket price\",\n          fontFamily: \"Gilroy-SemiBold\",\n          labelColor: \"#D4D4D4\",\n          labelActiveColor: \"#BEBEBE\",\n          underlineActiveColor: \"#BEBEBE\",\n          containerMaxWidth: \"100%\",\n          keyboardType: 'phone-pad',\n          returnKeyType: _reactNative.Platform.OS === 'android' ? 'next' : 'done',\n          value: formikProps.values.ticketPrice,\n          onChangeText: formikProps.handleChange('ticketPrice'),\n          onBlur: formikProps.handleBlur('ticketPrice'),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 25\n          }\n        }))), _react.default.createElement(_reactNative.View, {\n          style: _styles.default.descriptionTextView,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 21\n          }\n        }, _react.default.createElement(_reactNative.Text, {\n          style: _styles.default.descriptionText,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 23\n          }\n        }, \"Description\")), _react.default.createElement(_FormFieldWrapper.default, {\n          formikProps: formikProps,\n          formikKey: \"description\",\n          containerStyles: _styles.default.descriptionView,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 21\n          }\n        }, _react.default.createElement(_reactNative.TextInput, {\n          style: _styles.default.description,\n          underlineColorAndroid: \"transparent\",\n          placeholder: \"Write a short description for your event...\",\n          placeholderTextColor: \"grey\",\n          numberOfLines: 10,\n          multiline: true,\n          value: formikProps.values.description,\n          onChangeText: formikProps.handleChange('description'),\n          onBlur: formikProps.handleBlur('description'),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 476,\n            columnNumber: 23\n          }\n        })), _react.default.createElement(_FormFieldWrapper.default, {\n          formikProps: formikProps,\n          formikKey: \"otherDetails\",\n          containerStyles: _styles.default.fieldWrapper,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 489,\n            columnNumber: 21\n          }\n        }, _react.default.createElement(_reactNativeTextinputWithIcons.default, {\n          style: _styles.default.textInput,\n          label: \"Other details\",\n          fontFamily: \"Gilroy-SemiBold\",\n          labelColor: \"#D4D4D4\",\n          labelActiveColor: \"#BEBEBE\",\n          underlineActiveColor: \"#BEBEBE\",\n          containerMaxWidth: \"100%\",\n          value: formikProps.values.otherDetails,\n          onChangeText: formikProps.handleChange('otherDetails'),\n          onBlur: formikProps.handleBlur('otherDetails'),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 23\n          }\n        })), _react.default.createElement(_reactNative.View, {\n          style: _styles.default.addCoverImageView,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 507,\n            columnNumber: 21\n          }\n        }, _react.default.createElement(_reactNative.View, {\n          style: _styles.default.addCoverTextView,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 508,\n            columnNumber: 23\n          }\n        }, _react.default.createElement(_reactNative.Text, {\n          style: _styles.default.addCoverText,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 509,\n            columnNumber: 25\n          }\n        }, \"Add Cover Image\")), _react.default.createElement(_reactNative.TouchableOpacity, {\n          onPress: function onPress() {\n            _this2.chooseFile(formikProps);\n          },\n          style: _styles.default.addCoverimageAddIcon,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 512,\n            columnNumber: 23\n          }\n        }, _react.default.createElement(_reactNative.Image, {\n          source: _config.AppImages.imageaddButton,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 517,\n            columnNumber: 25\n          }\n        }))), _react.default.createElement(_FormFieldWrapper.default, {\n          formikProps: formikProps,\n          formikKey: \"coverPhoto\",\n          containerStyles: {},\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 521,\n            columnNumber: 21\n          }\n        }, _this2.state.coverPhotoSource && _this2.state.coverPhotoSource !== '' ? _react.default.createElement(_reactNative.Image, {\n          style: _styles.default.uploadImage,\n          source: {\n            uri: _this2.state.coverPhotoSource\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 527,\n            columnNumber: 27\n          }\n        }) : _react.default.createElement(_reactNative.Image, {\n          style: _styles.default.uploadImage,\n          source: _config.AppImages.imagePlaceholder,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 27\n          }\n        })), _react.default.createElement(_FormButton.default, {\n          title: \"CREATE EVENT\",\n          containerStyles: _styles.default.buttonSubmit,\n          loading: isLoading,\n          disabled: getEventTypesLoading || isLoading || !formikProps.isValid,\n          onPress: formikProps.handleSubmit,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 539,\n            columnNumber: 21\n          }\n        })))));\n      }));\n    }\n  }]);\n  return CreateEvent;\n}(_react.default.Component);\n\nCreateEvent.contextType = _auth.AuthContext;\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    getEventTypes: function getEventTypes() {\n      return dispatch(_event.eventOperations.getEventTypes());\n    },\n    addEvent: function addEvent(event, onAddEventSuccess) {\n      return dispatch(_event.eventOperations.addEvent(event, onAddEventSuccess));\n    }\n  };\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    eventTypes: state.event.eventTypes,\n    getEventTypesError: state.event.getEventTypesError,\n    getEventTypesLoading: state.event.getEventTypesLoading,\n    error: state.event.addEventError,\n    isLoading: state.event.addEventLoading\n  };\n};\n\nvar _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(CreateEvent);\n\nexports.default = _default;","map":{"version":3,"sources":["C:/Program Files/nodejs/ComeClosely/app/views/screens/CreateEvent/index.tsx"],"names":["INITIAL_STATE","coverPhotoSource","coverPhotoSourcePath","undefined","isDatePickerVisible","isTimePickerVisible","isMapViewModalVisible","INITIAL_FORM_STATE","title","type","location","date","time","ticketsAvailable","ticketPrice","description","otherDetails","coverPhoto","validationSchema","Yup","object","shape","string","label","required","min","max","number","test","value","CreateEvent","props","closeTapped","navigation","goBack","handleSelectEventType","formikProps","setFieldValue","touched","setFieldTouched","showDatePicker","setState","hideDatePicker","showTimePicker","hideTimePicker","toggleMapViewModal","state","onAddEventSuccess","eventTypeListItem","data","styles","eventTypeItemView","backgroundColor","values","item","name","fontFamily","alignSelf","color","chooseFile","options","takePhotoButtonTitle","chooseFromLibraryButtonTitle","mediaType","storageOptions","skipBackup","path","ImagePicker","showImagePicker","response","console","log","didCancel","error","customButton","uri","userId","context","currentUser","uid","addEvent","getEventTypes","eventTypes","getEventTypesLoading","isLoading","mainView","bgImageView","bgImage","AppImages","homeNavigation","overlay","titleView","closeIconView","close","closeIcon","handleSubmit","eventsFormMainView","eventsFormMainChildView","fieldWrapper","textInput","handleChange","handleBlur","eventTypeView","eventTypeText","eventTypesView","id","longitude","parseFloat","split","latitude","e","nativeEvent","coordinate","dateTimeView","fieldWrapperHalf","format","Platform","OS","descriptionTextView","descriptionText","descriptionView","addCoverImageView","addCoverTextView","addCoverText","addCoverimageAddIcon","imageaddButton","uploadImage","imagePlaceholder","buttonSubmit","isValid","React","Component","contextType","AuthContext","mapDispatchToProps","dispatch","eventOperations","event","mapStateToProps","getEventTypesError","addEventError","addEventLoading"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\r\nimport {\r\n  Platform,\r\n  View,\r\n  Text,\r\n  ScrollView,\r\n  Image,\r\n  FlatList,\r\n  TouchableOpacity,\r\n  TextInput,\r\n  ActivityIndicator,\r\n  Modal,\r\n} from 'react-native';\r\n\r\nimport { connect } from 'react-redux';\r\nimport TextInputCustome from 'react-native-textinput-with-icons';\r\nimport ImagePicker, {\r\n  ImagePickerResponse,\r\n  ImagePickerOptions,\r\n} from 'react-native-image-picker';\r\nimport DateTimePickerModal from 'react-native-modal-datetime-picker';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport moment from 'moment';\r\n\r\nimport { AppImages } from '../../config';\r\nimport styles from './styles';\r\nimport FormFieldWrapper from '../../components/FormFieldWrapper';\r\nimport MapLocationSelectionModal from '../../components/MapLocationSelectionModal';\r\nimport FormButton from '../../components/FormButton';\r\nimport { EventI, EventTypeI } from '../../../state/types';\r\nimport { eventOperations } from '../../../state/ducks/event';\r\nimport { AuthContext } from '../../../providers/auth';\r\n\r\ninterface ComponentProp {\r\n  navigation: any;\r\n  eventTypes: Array<EventTypeI>;\r\n  getEventTypesLoading: boolean;\r\n  error: string;\r\n  isLoading: boolean;\r\n  addEventSuccess: boolean;\r\n  addEvent(event: EventI, onAddEventSuccess: any): void;\r\n  getEventTypes(): Array<EventTypeI>;\r\n}\r\ninterface ComponentState {\r\n  coverPhotoSource: string;\r\n  coverPhotoSourcePath: string | undefined;\r\n  isDatePickerVisible: boolean;\r\n  isTimePickerVisible: boolean;\r\n  isMapViewModalVisible: boolean;\r\n}\r\nconst INITIAL_STATE: ComponentState = {\r\n  coverPhotoSource: '',\r\n  coverPhotoSourcePath: undefined,\r\n  isDatePickerVisible: false,\r\n  isTimePickerVisible: false,\r\n  isMapViewModalVisible: false,\r\n};\r\n\r\ninterface FormI {\r\n  title: string;\r\n  type: string;\r\n  location: string;\r\n  date: string;\r\n  time: string;\r\n  ticketsAvailable: number;\r\n  ticketPrice: number;\r\n  description: string;\r\n  otherDetails: string;\r\n  coverPhoto: string;\r\n}\r\nconst INITIAL_FORM_STATE: FormI = {\r\n  title: '',\r\n  type: '',\r\n  location: '',\r\n  date: '',\r\n  time: '',\r\n  ticketsAvailable: 0,\r\n  ticketPrice: 0,\r\n  description: '',\r\n  otherDetails: '',\r\n  coverPhoto: '',\r\n};\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  title: Yup.string()\r\n    .label('Title')\r\n    .required('Please enter title of event')\r\n    .min(3, 'Must have at least 3 characters')\r\n    .max(100, 'Must have at most 100 characters'),\r\n  type: Yup.string()\r\n    .label('Event Type')\r\n    .required('Please select type of event'),\r\n  location: Yup.string()\r\n    .label('Location')\r\n    .required('Please enter the location of event'),\r\n  date: Yup.string().label('Date').required('Please select date for event'),\r\n  time: Yup.string().label('Time').required('Please select time for event'),\r\n  ticketsAvailable: Yup.number()\r\n    .label('Number Of Tickets')\r\n    .required('Please enter number of tickets for event')\r\n    .test(\r\n      'non-zero-tickets',\r\n      'At least one ticket should be available',\r\n      function (value) {\r\n        return value > 0;\r\n      },\r\n    ),\r\n  ticketPrice: Yup.number()\r\n    .label('Price Of Ticket')\r\n    .required('Please enter price of ticket for event')\r\n    .test(\r\n      'non-zero-tickets',\r\n      'Price should be greater than zero',\r\n      function (value) {\r\n        return value > 0;\r\n      },\r\n    ),\r\n  description: Yup.string()\r\n    .label('Description')\r\n    .required('Please enter small description of event')\r\n    .min(5, 'Must have at least 5 characters')\r\n    .max(1000, 'Must have at most 1000 characters'),\r\n  otherDetails: Yup.string()\r\n    .label('Other details')\r\n    .required('Please enter other details of event')\r\n    .min(5, 'Must have at least 5 characters')\r\n    .max(1000, 'Must have at most 1000 characters'),\r\n  coverPhoto: Yup.string()\r\n    .label('Cover Photo')\r\n    .required('Please select a cover photo for event'),\r\n});\r\n\r\nclass CreateEvent extends React.Component<ComponentProp, ComponentState> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = { ...INITIAL_STATE };\r\n  }\r\n\r\n  closeTapped = () => {\r\n    this.props.navigation.goBack();\r\n  }\r\n  handleSelectEventType = (type: string, formikProps: any) => {\r\n    formikProps.setFieldValue('type', type);\r\n    if (!formikProps.touched.type) {\r\n      formikProps.setFieldTouched('type', true);\r\n    }\r\n  };\r\n\r\n  showDatePicker = () => {\r\n    this.setState({ isDatePickerVisible: true });\r\n  };\r\n  hideDatePicker = () => {\r\n    this.setState({ isDatePickerVisible: false });\r\n  };\r\n\r\n  showTimePicker = () => {\r\n    this.setState({ isTimePickerVisible: true });\r\n  };\r\n  hideTimePicker = () => {\r\n    this.setState({ isTimePickerVisible: false });\r\n  };\r\n\r\n  toggleMapViewModal = () => {\r\n    this.setState({ isMapViewModalVisible: !this.state.isMapViewModalVisible })\r\n  }\r\n  onAddEventSuccess = () => { this.props.navigation.goBack() }\r\n  handleSubmit(values: FormI) {\r\n    let userId = this.context.currentUser.uid\r\n    const data: EventI = {\r\n      ...values,\r\n      userId\r\n    };\r\n    this.props.addEvent(data, this.onAddEventSuccess);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.getEventTypes();\r\n  }\r\n\r\n  eventTypeListItem = (data: any, formikProps: any) => (\r\n    <TouchableOpacity\r\n      style={[\r\n        styles.eventTypeItemView,\r\n        // eslint-disable-next-line react-native/no-inline-styles\r\n        {\r\n          backgroundColor:\r\n            formikProps.values.type === data.item.name ? '#FF2485' : 'white',\r\n        },\r\n      ]}\r\n      onPress={() => this.handleSelectEventType(data.item.name, formikProps)}>\r\n      <Text\r\n        // eslint-disable-next-line react-native/no-inline-styles\r\n        style={{\r\n          fontFamily: 'Gilroy-ExtraBold',\r\n          alignSelf: 'center',\r\n          color:\r\n            formikProps.values.type === data.item.name ? 'white' : '#BEBEBE',\r\n        }}>\r\n        {data.item.name}\r\n      </Text>\r\n    </TouchableOpacity>\r\n  );\r\n\r\n  chooseFile = (formikProps: any) => {\r\n    var options: ImagePickerOptions = {\r\n      title: 'Choose Photo',\r\n      takePhotoButtonTitle: 'Camera',\r\n      chooseFromLibraryButtonTitle: 'Gallery',\r\n      mediaType: 'photo',\r\n\r\n      storageOptions: {\r\n        skipBackup: true,\r\n        path: 'images',\r\n      },\r\n    };\r\n    ImagePicker.showImagePicker(options, (response: ImagePickerResponse) => {\r\n      console.log('Response = ', response);\r\n\r\n      if (response.didCancel) {\r\n        console.log('User cancelled image picker');\r\n      } else if (response.error) {\r\n        console.log('ImagePicker Error: ', response.error);\r\n      } else if (response.customButton) {\r\n        console.log('User tapped custom button: ', response.customButton);\r\n      } else {\r\n        this.setState({\r\n          coverPhotoSource: response.uri,\r\n        });\r\n        formikProps.setFieldValue('coverPhoto', response.path);\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { eventTypes, getEventTypesLoading, isLoading } = this.props;\r\n    return (\r\n      <View style={styles.mainView}>\r\n        <View style={styles.bgImageView}>\r\n          <Image style={styles.bgImage} source={AppImages.homeNavigation} />\r\n        </View>\r\n\r\n        <View style={styles.overlay}>\r\n          <View style={styles.titleView}>\r\n            <Text style={styles.title}>Create Event</Text>\r\n            <TouchableOpacity\r\n              onPress={this.closeTapped}\r\n              style={styles.closeIconView}>\r\n              <Image source={AppImages.close} style={styles.closeIcon} />\r\n            </TouchableOpacity>\r\n          </View>\r\n        </View>\r\n\r\n        <Formik\r\n          initialValues={INITIAL_FORM_STATE}\r\n          validationSchema={validationSchema}\r\n          onSubmit={(values) => {\r\n            this.handleSubmit(values);\r\n          }}>\r\n          {(formikProps) => (\r\n            <Fragment>\r\n              <ScrollView style={styles.eventsFormMainView}>\r\n                <View>\r\n                  <View style={styles.eventsFormMainChildView}>\r\n                    <FormFieldWrapper\r\n                      formikProps={formikProps}\r\n                      formikKey=\"title\"\r\n                      containerStyles={styles.fieldWrapper}>\r\n                      <TextInputCustome\r\n                        style={styles.textInput}\r\n                        label=\"Title\"\r\n                        fontFamily=\"Gilroy-SemiBold\"\r\n                        labelColor=\"#D4D4D4\"\r\n                        labelActiveColor=\"#BEBEBE\"\r\n                        underlineActiveColor=\"#BEBEBE\"\r\n                        containerMaxWidth=\"100%\"\r\n                        value={formikProps.values.title}\r\n                        onChangeText={formikProps.handleChange('title')}\r\n                        onBlur={formikProps.handleBlur('title')}\r\n                      />\r\n                    </FormFieldWrapper>\r\n\r\n                    <View style={styles.eventTypeView}>\r\n                      <Text style={styles.eventTypeText}>Event Type</Text>\r\n                    </View>\r\n                    <View>\r\n                      {getEventTypesLoading && (\r\n                        <ActivityIndicator size=\"small\" color=\"#FF2485\" />\r\n                      )}\r\n                      {!getEventTypesLoading && (\r\n                        <FormFieldWrapper\r\n                          formikProps={formikProps}\r\n                          formikKey=\"type\"\r\n                          containerStyles={styles.eventTypesView}>\r\n                          <FlatList\r\n                            horizontal\r\n                            showsHorizontalScrollIndicator={false}\r\n                            legacyImplementation={false}\r\n                            data={eventTypes}\r\n                            renderItem={(item) =>\r\n                              this.eventTypeListItem(item, formikProps)\r\n                            }\r\n                            keyExtractor={(item) => item.id}\r\n                          />\r\n                        </FormFieldWrapper>\r\n                      )}\r\n                    </View>\r\n\r\n                    <FormFieldWrapper\r\n                      formikProps={formikProps}\r\n                      formikKey=\"location\"\r\n                      containerStyles={styles.fieldWrapper}>\r\n                      <TextInputCustome\r\n                        style={styles.textInput}\r\n                        label=\"Location\"\r\n                        fontFamily=\"Gilroy-SemiBold\"\r\n                        labelColor=\"#D4D4D4\"\r\n                        labelActiveColor=\"#BEBEBE\"\r\n                        underlineActiveColor=\"#BEBEBE\"\r\n                        containerMaxWidth=\"100%\"\r\n                        /* rightIcon=\"map-marker\"\r\n                        rightIconType=\"awesome\" */\r\n                        value={formikProps.values.location}\r\n                        // onChangeText={formikProps.handleChange('location')}\r\n                        // onBlur={formikProps.handleBlur('location')}\r\n                        onFocus={() => this.toggleMapViewModal()}\r\n                      />\r\n                      <MapLocationSelectionModal\r\n                        visible={this.state.isMapViewModalVisible}\r\n                        coordinate={\r\n                          formikProps.values.location &&\r\n                          {\r\n                            longitude: parseFloat(formikProps.values.location.split(',')[0]),\r\n                            latitude: parseFloat(formikProps.values.location.split(',')[1])\r\n                          }\r\n                        }\r\n                        handlePosition={(e) => {\r\n                          formikProps.setFieldValue(\r\n                            'location',\r\n                            e.nativeEvent.coordinate.longitude + ', ' + e.nativeEvent.coordinate.latitude,\r\n                          )\r\n                          this.toggleMapViewModal()\r\n                        }}\r\n                      />\r\n                    </FormFieldWrapper>\r\n\r\n                    <View style={styles.dateTimeView}>\r\n                      <FormFieldWrapper\r\n                        formikProps={formikProps}\r\n                        formikKey=\"date\"\r\n                        containerStyles={styles.fieldWrapperHalf}>\r\n                        <TextInputCustome\r\n                          style={styles.textInput}\r\n                          label=\"Date\"\r\n                          fontFamily=\"Gilroy-SemiBold\"\r\n                          labelColor=\"#D4D4D4\"\r\n                          labelActiveColor=\"#BEBEBE\"\r\n                          underlineActiveColor=\"#BEBEBE\"\r\n                          containerMaxWidth=\"100%\"\r\n                          /* rightIcon=\"calendar\"\r\n                          rightIconType=\"awesome\" */\r\n                          showSoftInputOnFocus={false}\r\n                          value={formikProps.values.date}\r\n                          onBlur={formikProps.handleBlur('date')}\r\n                          onTouchEnd={() => this.showDatePicker()}\r\n                        />\r\n                      </FormFieldWrapper>\r\n                      <DateTimePickerModal\r\n                        isVisible={this.state.isDatePickerVisible}\r\n                        mode=\"date\"\r\n                        onConfirm={(date: any) => {\r\n                          this.hideDatePicker();\r\n                          formikProps.setFieldValue(\r\n                            'date',\r\n                            moment(date).format('DD MMM YYYY'),\r\n                          );\r\n                        }}\r\n                        onCancel={this.hideDatePicker}\r\n                      />\r\n\r\n                      <FormFieldWrapper\r\n                        formikProps={formikProps}\r\n                        formikKey=\"time\"\r\n                        containerStyles={styles.fieldWrapperHalf}>\r\n                        <TextInputCustome\r\n                          style={styles.textInput}\r\n                          label=\"Time\"\r\n                          fontFamily=\"Gilroy-SemiBold\"\r\n                          labelColor=\"#D4D4D4\"\r\n                          labelActiveColor=\"#BEBEBE\"\r\n                          underlineActiveColor=\"#BEBEBE\"\r\n                          containerMaxWidth=\"100%\"\r\n                          /* rightIcon=\"clock\"\r\n                          rightIconType=\"awesome\" */\r\n                          showSoftInputOnFocus={false}\r\n                          value={formikProps.values.time}\r\n                          onBlur={formikProps.handleBlur('time')}\r\n                          onTouchEnd={() => this.showTimePicker()}\r\n                        />\r\n                      </FormFieldWrapper>\r\n                      <DateTimePickerModal\r\n                        isVisible={this.state.isTimePickerVisible}\r\n                        mode=\"time\"\r\n                        onConfirm={(time: any) => {\r\n                          this.hideTimePicker();\r\n                          formikProps.setFieldValue(\r\n                            'time',\r\n                            moment(time).format('hh:mm a'),\r\n                          );\r\n                        }}\r\n                        onCancel={this.hideTimePicker}\r\n                      />\r\n                    </View>\r\n\r\n                    <View style={styles.dateTimeView}>\r\n                      <FormFieldWrapper\r\n                        formikProps={formikProps}\r\n                        formikKey=\"ticketsAvailable\"\r\n                        containerStyles={styles.fieldWrapperHalf}>\r\n                        <TextInputCustome\r\n                          style={styles.textInput}\r\n                          label=\"Tickets available\"\r\n                          fontFamily=\"Gilroy-SemiBold\"\r\n                          labelColor=\"#D4D4D4\"\r\n                          labelActiveColor=\"#BEBEBE\"\r\n                          underlineActiveColor=\"#BEBEBE\"\r\n                          containerMaxWidth=\"100%\"\r\n                          /* rightIcon=\"ticket\"\r\n                          rightIconType=\"awesome\" */\r\n                          keyboardType={'phone-pad'}\r\n                          returnKeyType={\r\n                            Platform.OS === 'android' ? 'next' : 'done'\r\n                          }\r\n                          value={formikProps.values.ticketsAvailable}\r\n                          onChangeText={formikProps.handleChange(\r\n                            'ticketsAvailable',\r\n                          )}\r\n                          onBlur={formikProps.handleBlur('ticketsAvailable')}\r\n                        />\r\n                      </FormFieldWrapper>\r\n\r\n                      <FormFieldWrapper\r\n                        formikProps={formikProps}\r\n                        formikKey=\"ticketPrice\"\r\n                        containerStyles={styles.fieldWrapperHalf}>\r\n                        <TextInputCustome\r\n                          style={styles.textInput}\r\n                          label={\"Ticket price\"}\r\n                          fontFamily=\"Gilroy-SemiBold\"\r\n                          labelColor=\"#D4D4D4\"\r\n                          labelActiveColor=\"#BEBEBE\"\r\n                          underlineActiveColor=\"#BEBEBE\"\r\n                          containerMaxWidth=\"100%\"\r\n                          /* rightIcon=\"ticket\"\r\n                          rightIconType=\"awesome\" */\r\n                          keyboardType={'phone-pad'}\r\n                          returnKeyType={\r\n                            Platform.OS === 'android' ? 'next' : 'done'\r\n                          }\r\n                          value={formikProps.values.ticketPrice}\r\n                          onChangeText={formikProps.handleChange(\r\n                            'ticketPrice',\r\n                          )}\r\n                          onBlur={formikProps.handleBlur('ticketPrice')}\r\n                        />\r\n                      </FormFieldWrapper>\r\n                    </View>\r\n\r\n                    <View style={styles.descriptionTextView}>\r\n                      <Text style={styles.descriptionText}>Description</Text>\r\n                    </View>\r\n                    <FormFieldWrapper\r\n                      formikProps={formikProps}\r\n                      formikKey=\"description\"\r\n                      containerStyles={styles.descriptionView}>\r\n                      <TextInput\r\n                        style={styles.description}\r\n                        underlineColorAndroid=\"transparent\"\r\n                        placeholder=\"Write a short description for your event...\"\r\n                        placeholderTextColor=\"grey\"\r\n                        numberOfLines={10}\r\n                        multiline={true}\r\n                        value={formikProps.values.description}\r\n                        onChangeText={formikProps.handleChange('description')}\r\n                        onBlur={formikProps.handleBlur('description')}\r\n                      />\r\n                    </FormFieldWrapper>\r\n\r\n                    <FormFieldWrapper\r\n                      formikProps={formikProps}\r\n                      formikKey=\"otherDetails\"\r\n                      containerStyles={styles.fieldWrapper}>\r\n                      <TextInputCustome\r\n                        style={styles.textInput}\r\n                        label=\"Other details\"\r\n                        fontFamily=\"Gilroy-SemiBold\"\r\n                        labelColor=\"#D4D4D4\"\r\n                        labelActiveColor=\"#BEBEBE\"\r\n                        underlineActiveColor=\"#BEBEBE\"\r\n                        containerMaxWidth=\"100%\"\r\n                        value={formikProps.values.otherDetails}\r\n                        onChangeText={formikProps.handleChange('otherDetails')}\r\n                        onBlur={formikProps.handleBlur('otherDetails')}\r\n                      />\r\n                    </FormFieldWrapper>\r\n\r\n                    <View style={styles.addCoverImageView}>\r\n                      <View style={styles.addCoverTextView}>\r\n                        <Text style={styles.addCoverText}>Add Cover Image</Text>\r\n                      </View>\r\n\r\n                      <TouchableOpacity\r\n                        onPress={() => {\r\n                          this.chooseFile(formikProps);\r\n                        }}\r\n                        style={styles.addCoverimageAddIcon}>\r\n                        <Image source={AppImages.imageaddButton} />\r\n                      </TouchableOpacity>\r\n                    </View>\r\n\r\n                    <FormFieldWrapper\r\n                      formikProps={formikProps}\r\n                      formikKey=\"coverPhoto\"\r\n                      containerStyles={{}}>\r\n                      {this.state.coverPhotoSource &&\r\n                        this.state.coverPhotoSource !== '' ? (\r\n                          <Image\r\n                            style={styles.uploadImage}\r\n                            source={{ uri: this.state.coverPhotoSource }}\r\n                          />\r\n                        ) : (\r\n                          <Image\r\n                            style={styles.uploadImage}\r\n                            source={AppImages.imagePlaceholder}\r\n                          />\r\n                        )}\r\n                    </FormFieldWrapper>\r\n\r\n                    <FormButton\r\n                      title=\"CREATE EVENT\"\r\n                      containerStyles={styles.buttonSubmit}\r\n                      loading={isLoading}\r\n                      disabled={\r\n                        getEventTypesLoading ||\r\n                        isLoading ||\r\n                        !formikProps.isValid\r\n                      }\r\n                      onPress={formikProps.handleSubmit}\r\n                    />\r\n                  </View>\r\n                </View>\r\n              </ScrollView>\r\n            </Fragment>\r\n          )}\r\n        </Formik> \r\n      </View>\r\n    );\r\n  }\r\n}\r\nCreateEvent.contextType = AuthContext;\r\n\r\nconst mapDispatchToProps = (dispatch: Function) => {\r\n  return {\r\n    getEventTypes: () => dispatch(eventOperations.getEventTypes()),\r\n    addEvent: (event: EventI, onAddEventSuccess: any) => dispatch(eventOperations.addEvent(event, onAddEventSuccess)),\r\n  };\r\n};\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    eventTypes: state.event.eventTypes,\r\n    getEventTypesError: state.event.getEventTypesError,\r\n    getEventTypesLoading: state.event.getEventTypesLoading,\r\n    error: state.event.addEventError,\r\n    isLoading: state.event.addEventLoading,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateEvent);\r\n"]},"metadata":{},"sourceType":"script"}