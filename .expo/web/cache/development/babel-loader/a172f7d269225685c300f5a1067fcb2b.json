{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getStories = exports.addNewStory = exports.getUserChatrooms = exports.getMessages = exports.sendMessage = exports.viewUser = exports.getFollower = exports.getFollowing = exports.followUser = exports.unfollowUser = exports.searchUsers = exports.getRecommendedUsers = exports.getUser = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _firestore = _interopRequireDefault(require(\"@react-native-firebase/firestore\"));\n\nvar _auth = _interopRequireDefault(require(\"@react-native-firebase/auth\"));\n\nvar _types = require(\"./types\");\n\nvar _utils = require(\"../../../utils\");\n\nvar getUser = function getUser(id) {\n  return function _callee(dispatch) {\n    return _regenerator.default.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch({\n              type: _types.GET_USER_REQUEST\n            });\n\n            try {\n              (0, _firestore.default)().collection('users').doc(id).get().then(function (documentSnapshot) {\n                if (documentSnapshot.exists) {\n                  var _auth$currentUser;\n\n                  var userData = (0, _extends2.default)({}, documentSnapshot.data(), {\n                    uid: documentSnapshot.id\n                  });\n                  dispatch({\n                    type: _types.GET_USER_SUCCESS,\n                    payload: userData\n                  });\n                  (_auth$currentUser = (0, _auth.default)().currentUser) == null ? void 0 : _auth$currentUser.updateProfile({\n                    displayName: userData.name,\n                    photoURL: userData.displayPhoto\n                  });\n                }\n              });\n            } catch (error) {\n              dispatch({\n                type: _types.GET_USER_FAILED,\n                payload: error\n              });\n            }\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nexports.getUser = getUser;\n\nvar getRecommendedUsers = function getRecommendedUsers() {\n  return function _callee2(dispatch) {\n    return _regenerator.default.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            dispatch({\n              type: _types.GET_RECOMMENDED_USERS_REQUEST\n            });\n\n            try {\n              (0, _firestore.default)().collection('users').onSnapshot(function (querySnapshot) {\n                var events = [];\n                querySnapshot.forEach(function (documentSnapshot) {\n                  events.push((0, _extends2.default)({}, documentSnapshot.data(), {\n                    id: documentSnapshot.id\n                  }));\n                });\n                dispatch({\n                  type: _types.GET_RECOMMENDED_USERS_SUCCESS,\n                  payload: events\n                });\n              });\n            } catch (error) {\n              dispatch({\n                type: _types.GET_RECOMMENDED_USERS_FAILED,\n                payload: error\n              });\n            }\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nexports.getRecommendedUsers = getRecommendedUsers;\n\nvar searchUsers = function searchUsers(key) {\n  return function _callee3(dispatch) {\n    return _regenerator.default.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            dispatch({\n              type: _types.GET_RECOMMENDED_USERS_REQUEST\n            });\n\n            try {\n              (0, _firestore.default)().collection('users').onSnapshot(function (querySnapshot) {\n                var events = [];\n                querySnapshot.forEach(function (documentSnapshot) {\n                  if (documentSnapshot.data().name.toLowerCase().indexOf(key.toLowerCase()) != -1) {\n                    events.push((0, _extends2.default)({}, documentSnapshot.data(), {\n                      id: documentSnapshot.id\n                    }));\n                  }\n                });\n                dispatch({\n                  type: _types.GET_SEARCH_USERS_SUCCESS,\n                  payload: events\n                });\n              });\n            } catch (error) {\n              dispatch({\n                type: _types.GET_SEARCH_USERS_FAILD,\n                payload: error\n              });\n            }\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nexports.searchUsers = searchUsers;\n\nvar unfollowUser = function unfollowUser(userKey, followUserKey) {\n  return function _callee4(dispatch) {\n    return _regenerator.default.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            dispatch({\n              type: _types.GET_FOLLOW_USERS_REQUEST\n            });\n            _context4.prev = 1;\n            _context4.next = 4;\n            return _regenerator.default.awrap((0, _firestore.default)().collection('following_followers').where('userKey', '==', userKey).where('followUserKey', '==', followUserKey).get().then(function (querySnapshot) {\n              querySnapshot.forEach(function (doc) {\n                console.log('doc:', doc.id);\n                doc.ref.delete();\n              });\n            }));\n\n          case 4:\n            return _context4.abrupt(\"return\", _context4.sent);\n\n          case 7:\n            _context4.prev = 7;\n            _context4.t0 = _context4[\"catch\"](1);\n\n          case 9:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, [[1, 7]], Promise);\n  };\n};\n\nexports.unfollowUser = unfollowUser;\n\nvar followUser = function followUser(userKey, followUserKey) {\n  return function _callee5(dispatch) {\n    return _regenerator.default.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            dispatch({\n              type: _types.GET_FOLLOW_USERS_REQUEST\n            });\n\n            try {\n              (0, _firestore.default)().collection('following_followers').doc().set({\n                userKey: userKey,\n                followUserKey: followUserKey\n              });\n              dispatch({\n                type: _types.GET_FOLLOW_USERS_SUCCESS,\n                payload: 'Follow'\n              });\n            } catch (error) {\n              dispatch({\n                type: _types.GET_FOLLOW_USERS_FAILD,\n                payload: error\n              });\n            }\n\n          case 2:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nexports.followUser = followUser;\n\nvar getFollowing = function getFollowing(userKey) {\n  return function _callee6(dispatch) {\n    return _regenerator.default.async(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            try {\n              (0, _firestore.default)().collection('following_followers').onSnapshot(function (querySnapshot) {\n                var events = [];\n                querySnapshot.forEach(function (documentSnapshot) {\n                  if (documentSnapshot.data().userKey == userKey) {\n                    events.push((0, _extends2.default)({}, documentSnapshot.data(), {\n                      id: documentSnapshot.id\n                    }));\n                  }\n                });\n                dispatch({\n                  type: _types.GET_FOLLOWING_SUCCESS,\n                  payload: events\n                });\n              });\n            } catch (error) {\n              dispatch({\n                type: _types.GET_FOLLOW_USERS_FAILD,\n                payload: error\n              });\n            }\n\n          case 1:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nexports.getFollowing = getFollowing;\n\nvar getFollower = function getFollower(userKey) {\n  return function _callee7(dispatch) {\n    return _regenerator.default.async(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            try {\n              (0, _firestore.default)().collection('following_followers').onSnapshot(function (querySnapshot) {\n                var events = [];\n                querySnapshot.forEach(function (documentSnapshot) {\n                  if (documentSnapshot.data().followUserKey == userKey) {\n                    events.push((0, _extends2.default)({}, documentSnapshot.data(), {\n                      id: documentSnapshot.id\n                    }));\n                  }\n                });\n                dispatch({\n                  type: _types.GET_FOLLOWER_SUCCESS,\n                  payload: events\n                });\n              });\n            } catch (error) {\n              dispatch({\n                type: _types.GET_FOLLOW_USERS_FAILD,\n                payload: error\n              });\n            }\n\n          case 1:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nexports.getFollower = getFollower;\n\nvar viewUser = function viewUser(userKey) {\n  return function _callee8(dispatch) {\n    return _regenerator.default.async(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            dispatch({\n              type: _types.SET_USER_ID_SUCCESS,\n              payload: userKey\n            });\n\n          case 1:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nexports.viewUser = viewUser;\n\nvar sendMessage = function sendMessage(chatroomId, userKey, otherUserKey, message, onNewChatroomCreated) {\n  return function _callee9(dispatch) {\n    var now, roomKey, res;\n    return _regenerator.default.async(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.prev = 0;\n            now = Date.now();\n\n            if (chatroomId) {\n              _context9.next = 11;\n              break;\n            }\n\n            roomKey = (0, _utils.generateNewChatRoomKey)(userKey, otherUserKey);\n            _context9.next = 6;\n            return _regenerator.default.awrap((0, _firestore.default)().collection('chatrooms').doc(roomKey).set({\n              createdAt: now,\n              updatedAt: now,\n              users: [userKey, otherUserKey],\n              lastMessage: message\n            }));\n\n          case 6:\n            res = _context9.sent;\n            chatroomId = roomKey;\n            onNewChatroomCreated(chatroomId);\n            _context9.next = 13;\n            break;\n\n          case 11:\n            _context9.next = 13;\n            return _regenerator.default.awrap((0, _firestore.default)().collection('chatrooms').doc(chatroomId).update({\n              updatedAt: now,\n              lastMessage: message\n            }));\n\n          case 13:\n            (0, _firestore.default)().collection('chatroomMessages').add({\n              chatroomId: chatroomId,\n              updatedAt: now,\n              createdAt: now,\n              sender: userKey,\n              message: message\n            });\n            dispatch({\n              type: _types.SEND_MESSAGE_SUCCESS,\n              payload: 'Send'\n            });\n            _context9.next = 20;\n            break;\n\n          case 17:\n            _context9.prev = 17;\n            _context9.t0 = _context9[\"catch\"](0);\n            console.log(_context9.t0);\n\n          case 20:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, null, null, [[0, 17]], Promise);\n  };\n};\n\nexports.sendMessage = sendMessage;\n\nvar getMessages = function getMessages(chatroomId) {\n  return function _callee10(dispatch) {\n    return _regenerator.default.async(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            try {\n              (0, _firestore.default)().collection('chatroomMessages').where('chatroomId', '==', chatroomId).orderBy('createdAt').onSnapshot(function (querySnapshot) {\n                var events = [];\n                querySnapshot == null ? void 0 : querySnapshot.forEach(function (documentSnapshot) {\n                  events.push((0, _extends2.default)({}, documentSnapshot.data(), {\n                    id: documentSnapshot.id\n                  }));\n                });\n                dispatch({\n                  type: _types.GET_MESSAGE_SUCCESS,\n                  payload: events\n                });\n              });\n            } catch (error) {\n              dispatch({\n                type: _types.GET_MESSAGE_SUCCESS,\n                payload: []\n              });\n              console.log(error);\n            }\n\n          case 1:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nexports.getMessages = getMessages;\n\nvar getUserChatrooms = function getUserChatrooms(userId) {\n  return function _callee13(dispatch) {\n    return _regenerator.default.async(function _callee13$(_context13) {\n      while (1) {\n        switch (_context13.prev = _context13.next) {\n          case 0:\n            try {\n              (0, _firestore.default)().collection('chatrooms').where('users', 'array-contains', userId).onSnapshot(function _callee12(querySnapshot) {\n                var events;\n                return _regenerator.default.async(function _callee12$(_context12) {\n                  while (1) {\n                    switch (_context12.prev = _context12.next) {\n                      case 0:\n                        events = [];\n                        querySnapshot == null ? void 0 : querySnapshot.forEach(function (documentSnapshot) {\n                          events.push((0, _extends2.default)({}, documentSnapshot.data(), {\n                            id: documentSnapshot.id\n                          }));\n                        });\n                        _context12.next = 4;\n                        return _regenerator.default.awrap(Promise.all(events.map(function _callee11(event, index) {\n                          var otherUser, uRef, doc;\n                          return _regenerator.default.async(function _callee11$(_context11) {\n                            while (1) {\n                              switch (_context11.prev = _context11.next) {\n                                case 0:\n                                  otherUser = event.users.filter(function (u) {\n                                    return u !== userId;\n                                  })[0];\n                                  uRef = (0, _firestore.default)().collection('users').doc(otherUser);\n                                  _context11.next = 4;\n                                  return _regenerator.default.awrap(uRef.get());\n\n                                case 4:\n                                  doc = _context11.sent;\n                                  events[index].otherUserData = (0, _extends2.default)({}, doc.data(), {\n                                    id: doc.id\n                                  });\n                                  return _context11.abrupt(\"return\");\n\n                                case 7:\n                                case \"end\":\n                                  return _context11.stop();\n                              }\n                            }\n                          }, null, null, null, Promise);\n                        })));\n\n                      case 4:\n                        dispatch({\n                          type: _types.GET_CHATROOMS_SUCCESS,\n                          payload: events\n                        });\n\n                      case 5:\n                      case \"end\":\n                        return _context12.stop();\n                    }\n                  }\n                }, null, null, null, Promise);\n              });\n            } catch (error) {\n              dispatch({\n                type: _types.GET_CHATROOMS_SUCCESS,\n                payload: []\n              });\n              console.log(error);\n            }\n\n          case 1:\n          case \"end\":\n            return _context13.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nexports.getUserChatrooms = getUserChatrooms;\n\nvar addNewStory = function addNewStory(data, onSuccessCallback) {\n  return function _callee14(dispatch) {\n    var now;\n    return _regenerator.default.async(function _callee14$(_context14) {\n      while (1) {\n        switch (_context14.prev = _context14.next) {\n          case 0:\n            dispatch({\n              type: _types.ADD_STORY_REQUEST\n            });\n            _context14.prev = 1;\n            now = Date.now();\n            _context14.next = 5;\n            return _regenerator.default.awrap((0, _firestore.default)().collection('stories').add((0, _extends2.default)({}, data, {\n              createdAt: now,\n              updatedAt: now\n            })));\n\n          case 5:\n            onSuccessCallback(true);\n            dispatch({\n              type: _types.ADD_STORY_SUCCESS,\n              payload: true\n            });\n            _context14.next = 12;\n            break;\n\n          case 9:\n            _context14.prev = 9;\n            _context14.t0 = _context14[\"catch\"](1);\n            dispatch({\n              type: _types.ADD_STORY_FAILED,\n              payload: _context14.t0\n            });\n\n          case 12:\n          case \"end\":\n            return _context14.stop();\n        }\n      }\n    }, null, null, [[1, 9]], Promise);\n  };\n};\n\nexports.addNewStory = addNewStory;\n\nvar getStories = function getStories(userId) {\n  return function _callee17(dispatch) {\n    return _regenerator.default.async(function _callee17$(_context17) {\n      while (1) {\n        switch (_context17.prev = _context17.next) {\n          case 0:\n            try {\n              dispatch({\n                type: _types.GET_STORIES_REQUEST,\n                payload: true\n              });\n              (0, _firestore.default)().collection('stories').onSnapshot(function _callee16(querySnapshot) {\n                var events, storiesWithUserData, userIdsList;\n                return _regenerator.default.async(function _callee16$(_context16) {\n                  while (1) {\n                    switch (_context16.prev = _context16.next) {\n                      case 0:\n                        events = [];\n                        storiesWithUserData = [];\n                        querySnapshot == null ? void 0 : querySnapshot.forEach(function (documentSnapshot) {\n                          events.push((0, _extends2.default)({}, documentSnapshot.data(), {\n                            id: documentSnapshot.id\n                          }));\n                        });\n                        userIdsList = events.map(function (item) {\n                          return item.userId;\n                        });\n                        userIdsList = (0, _toConsumableArray2.default)(new Set(userIdsList));\n                        _context16.next = 7;\n                        return _regenerator.default.awrap(Promise.all(userIdsList.map(function _callee15(userId, index) {\n                          var uRef, user, userData;\n                          return _regenerator.default.async(function _callee15$(_context15) {\n                            while (1) {\n                              switch (_context15.prev = _context15.next) {\n                                case 0:\n                                  uRef = (0, _firestore.default)().collection('users').doc(userId);\n                                  _context15.next = 3;\n                                  return _regenerator.default.awrap(uRef.get());\n\n                                case 3:\n                                  user = _context15.sent;\n                                  userData = (0, _extends2.default)({}, user.data(), {\n                                    id: user.id\n                                  });\n                                  storiesWithUserData.push({\n                                    profile: userData.displayPhoto,\n                                    username: userData.name,\n                                    title: userData.name,\n                                    stories: events.map(function (ev) {\n                                      if (ev.userId == userId) {\n                                        return (0, _extends2.default)({}, ev, {\n                                          type: 'image'\n                                        });\n                                      }\n\n                                      return false;\n                                    })\n                                  });\n                                  return _context15.abrupt(\"return\");\n\n                                case 7:\n                                case \"end\":\n                                  return _context15.stop();\n                              }\n                            }\n                          }, null, null, null, Promise);\n                        })));\n\n                      case 7:\n                        dispatch({\n                          type: _types.GET_STORIES_SUCCESS,\n                          payload: storiesWithUserData\n                        });\n\n                      case 8:\n                      case \"end\":\n                        return _context16.stop();\n                    }\n                  }\n                }, null, null, null, Promise);\n              });\n            } catch (error) {\n              console.log(error);\n              dispatch({\n                type: _types.GET_STORIES_SUCCESS,\n                payload: []\n              });\n            }\n\n          case 1:\n          case \"end\":\n            return _context17.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nexports.getStories = getStories;","map":{"version":3,"sources":["C:/Program Files/nodejs/ComeClosely/app/state/ducks/user/actions.ts"],"names":["getUser","id","dispatch","type","GET_USER_REQUEST","collection","doc","get","then","documentSnapshot","exists","userData","data","uid","GET_USER_SUCCESS","payload","currentUser","updateProfile","displayName","name","photoURL","displayPhoto","error","GET_USER_FAILED","getRecommendedUsers","GET_RECOMMENDED_USERS_REQUEST","onSnapshot","querySnapshot","events","forEach","push","GET_RECOMMENDED_USERS_SUCCESS","GET_RECOMMENDED_USERS_FAILED","searchUsers","key","toLowerCase","indexOf","GET_SEARCH_USERS_SUCCESS","GET_SEARCH_USERS_FAILD","unfollowUser","userKey","followUserKey","GET_FOLLOW_USERS_REQUEST","where","console","log","ref","delete","followUser","set","GET_FOLLOW_USERS_SUCCESS","GET_FOLLOW_USERS_FAILD","getFollowing","GET_FOLLOWING_SUCCESS","getFollower","GET_FOLLOWER_SUCCESS","viewUser","SET_USER_ID_SUCCESS","sendMessage","chatroomId","otherUserKey","message","onNewChatroomCreated","now","Date","roomKey","createdAt","updatedAt","users","lastMessage","res","update","add","sender","SEND_MESSAGE_SUCCESS","getMessages","orderBy","GET_MESSAGE_SUCCESS","getUserChatrooms","userId","Promise","all","map","event","index","otherUser","filter","u","uRef","otherUserData","GET_CHATROOMS_SUCCESS","addNewStory","onSuccessCallback","ADD_STORY_REQUEST","ADD_STORY_SUCCESS","ADD_STORY_FAILED","getStories","GET_STORIES_REQUEST","storiesWithUserData","userIdsList","item","Set","user","profile","username","title","stories","ev","GET_STORIES_SUCCESS"],"mappings":"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","sourcesContent":["import firestore from '@react-native-firebase/firestore';\r\nimport auth from '@react-native-firebase/auth';\r\nimport { UserI } from './../../types';\r\n\r\nimport {\r\n  GET_USER_REQUEST,\r\n  GET_USER_SUCCESS,\r\n  GET_USER_FAILED,\r\n  GET_RECOMMENDED_USERS_REQUEST,\r\n  GET_RECOMMENDED_USERS_SUCCESS,\r\n  GET_RECOMMENDED_USERS_FAILED,\r\n  GET_SEARCH_USERS_SUCCESS,\r\n  GET_SEARCH_USERS_FAILD,\r\n  GET_FOLLOW_USERS_REQUEST,\r\n  GET_FOLLOW_USERS_SUCCESS,\r\n  GET_FOLLOW_USERS_FAILD,\r\n  GET_FOLLOWER_SUCCESS,\r\n  GET_FOLLOWING_SUCCESS,\r\n  SET_USER_ID_SUCCESS,\r\n  SEND_MESSAGE_SUCCESS,\r\n  GET_MESSAGE_SUCCESS,\r\n  GET_MESSAGE_FRIEND_SUCCESS,\r\n  GET_CHATROOMS_SUCCESS,\r\n  GET_STORIES_SUCCESS,\r\n  GET_STORIES_REQUEST,\r\n  ADD_STORY_REQUEST,\r\n  ADD_STORY_SUCCESS,\r\n  ADD_STORY_FAILED\r\n} from './types';\r\nimport { generateNewChatRoomKey } from '../../../utils';\r\nexport const getUser = (id: string) => {\r\n  return async (dispatch: Function) => {\r\n    dispatch({ type: GET_USER_REQUEST });\r\n    try {\r\n      firestore()\r\n        .collection('users')\r\n        .doc(id)\r\n        .get()\r\n        .then((documentSnapshot) => {\r\n          if (documentSnapshot.exists) {\r\n            let userData = { ...documentSnapshot.data(), uid: documentSnapshot.id }\r\n            dispatch({\r\n              type: GET_USER_SUCCESS,\r\n              payload: userData,\r\n            });\r\n            auth().currentUser?.updateProfile({\r\n              displayName: userData.name,\r\n              photoURL: userData.displayPhoto\r\n            })\r\n          }\r\n        });\r\n    } catch (error) {\r\n      dispatch({ type: GET_USER_FAILED, payload: error });\r\n    }\r\n  };\r\n};\r\n\r\nexport const getRecommendedUsers = () => {\r\n  return async (dispatch: Function) => {\r\n    dispatch({ type: GET_RECOMMENDED_USERS_REQUEST });\r\n    try {\r\n      firestore()\r\n        .collection('users')\r\n        .onSnapshot((querySnapshot) => {\r\n          const events: Array<UserI> = [];\r\n\r\n          querySnapshot.forEach((documentSnapshot) => {\r\n            events.push({\r\n              ...documentSnapshot.data(),\r\n              id: documentSnapshot.id,\r\n            });\r\n          });\r\n\r\n          dispatch({ type: GET_RECOMMENDED_USERS_SUCCESS, payload: events });\r\n        });\r\n    } catch (error) {\r\n      dispatch({ type: GET_RECOMMENDED_USERS_FAILED, payload: error });\r\n    }\r\n  };\r\n};\r\nexport const searchUsers = (key) => {\r\n  return async (dispatch: Function) => {\r\n    dispatch({ type: GET_RECOMMENDED_USERS_REQUEST });\r\n    try {\r\n      firestore()\r\n        .collection('users')\r\n        .onSnapshot((querySnapshot) => {\r\n          const events: Array<UserI> = [];\r\n\r\n          querySnapshot.forEach((documentSnapshot) => {\r\n            if (documentSnapshot.data().name.toLowerCase().indexOf(key.toLowerCase()) != -1) {\r\n              events.push({\r\n                ...documentSnapshot.data(),\r\n                id: documentSnapshot.id,\r\n              });\r\n            }\r\n          });\r\n          dispatch({ type: GET_SEARCH_USERS_SUCCESS, payload: events });\r\n        });\r\n    } catch (error) {\r\n      dispatch({ type: GET_SEARCH_USERS_FAILD, payload: error });\r\n    }\r\n  };\r\n};\r\n\r\n\r\nexport const unfollowUser = (userKey, followUserKey) => {\r\n  return async (dispatch: Function) => {\r\n    dispatch({ type: GET_FOLLOW_USERS_REQUEST });\r\n    try {\r\n      return await firestore()\r\n        .collection('following_followers')\r\n        .where('userKey', '==', userKey)\r\n        .where('followUserKey', '==', followUserKey)\r\n        .get()\r\n        .then(function (querySnapshot) {\r\n          querySnapshot.forEach(function (doc) {\r\n            console.log('doc:', doc.id)\r\n            doc.ref.delete();\r\n          });\r\n        });\r\n\r\n      // dispatch({ type: GET_FOLLOW_USERS_SUCCESS, payload: 'Follow' });\r\n    } catch (error) {\r\n      // dispatch({ type: GET_FOLLOW_USERS_FAILD, payload: error });\r\n    }\r\n  };\r\n};\r\nexport const followUser = (userKey, followUserKey) => {\r\n  return async (dispatch: Function) => {\r\n    dispatch({ type: GET_FOLLOW_USERS_REQUEST });\r\n    try {\r\n      firestore()\r\n        .collection('following_followers').doc().set({\r\n          userKey,\r\n          followUserKey\r\n        })\r\n\r\n      dispatch({ type: GET_FOLLOW_USERS_SUCCESS, payload: 'Follow' });\r\n    } catch (error) {\r\n      dispatch({ type: GET_FOLLOW_USERS_FAILD, payload: error });\r\n    }\r\n  };\r\n};\r\nexport const getFollowing = (userKey) => {\r\n  return async (dispatch: Function) => {\r\n    try {\r\n      firestore()\r\n        .collection('following_followers')\r\n        .onSnapshot((querySnapshot) => {\r\n          const events: Array<UserI> = [];\r\n          querySnapshot.forEach((documentSnapshot) => {\r\n            if (documentSnapshot.data().userKey == userKey) {\r\n              events.push({\r\n                ...documentSnapshot.data(),\r\n                id: documentSnapshot.id,\r\n              });\r\n            }\r\n          });\r\n          dispatch({ type: GET_FOLLOWING_SUCCESS, payload: events });\r\n        });\r\n    } catch (error) {\r\n      dispatch({ type: GET_FOLLOW_USERS_FAILD, payload: error });\r\n    }\r\n  };\r\n};\r\nexport const getFollower = (userKey) => {\r\n  return async (dispatch: Function) => {\r\n    try {\r\n      firestore()\r\n        .collection('following_followers')\r\n        .onSnapshot((querySnapshot) => {\r\n          const events: Array<UserI> = [];\r\n          querySnapshot.forEach((documentSnapshot) => {\r\n            if (documentSnapshot.data().followUserKey == userKey) {\r\n              events.push({\r\n                ...documentSnapshot.data(),\r\n                id: documentSnapshot.id,\r\n              });\r\n            }\r\n          });\r\n          dispatch({ type: GET_FOLLOWER_SUCCESS, payload: events });\r\n        });\r\n    } catch (error) {\r\n      dispatch({ type: GET_FOLLOW_USERS_FAILD, payload: error });\r\n    }\r\n  };\r\n};\r\nexport const viewUser = (userKey) => {\r\n  return async (dispatch: Function) => {\r\n    dispatch({ type: SET_USER_ID_SUCCESS, payload: userKey });\r\n  };\r\n};\r\nexport const sendMessage = (chatroomId: string, userKey: string, otherUserKey: string, message: string, onNewChatroomCreated) => {\r\n  return async (dispatch: Function) => {\r\n    try {\r\n      let now = Date.now()\r\n\r\n\r\n      if (!chatroomId) {//start new chatroom between userKey and otherUser\r\n        let roomKey = generateNewChatRoomKey(userKey, otherUserKey)\r\n        const res = await firestore().collection('chatrooms').doc(roomKey).set({\r\n          createdAt: now,\r\n          updatedAt: now,\r\n          users: [userKey, otherUserKey],\r\n          lastMessage: message\r\n        });\r\n        chatroomId = roomKey;\r\n        onNewChatroomCreated(chatroomId)\r\n      }\r\n      else {\r\n        await firestore().collection('chatrooms').doc(chatroomId)\r\n          .update({\r\n            updatedAt: now,\r\n            lastMessage: message\r\n          })\r\n      }\r\n      firestore().collection('chatroomMessages')\r\n        .add({\r\n          chatroomId,\r\n          updatedAt: now,\r\n          createdAt: now,\r\n          sender: userKey,\r\n          message\r\n        })\r\n\r\n      // firestore().collection('friends').doc(currentUser).collection(otherUser).doc().set({ id: 'message' })\r\n      // firestore().collection('friends').doc(otherUser).collection(currentUser).doc().set({ id: 'message' })\r\n      // firestore().collection('messages').doc(currentUser).collection(otherUser).doc().set({ message })\r\n      // firestore().collection('messages').doc(otherUser).collection(currentUser).doc().set({ message })\r\n\r\n      dispatch({ type: SEND_MESSAGE_SUCCESS, payload: 'Send' });\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  };\r\n};\r\n\r\nexport const getMessages = (chatroomId: string) => {\r\n  return async (dispatch: Function) => {\r\n    try {\r\n      firestore()\r\n        .collection('chatroomMessages')\r\n        .where('chatroomId', '==', chatroomId)\r\n        // .orderBy('message')\r\n        .orderBy('createdAt')\r\n        // .orderBy('sender')\r\n        .onSnapshot((querySnapshot) => {\r\n          const events: Array<UserI> = [];\r\n          querySnapshot?.forEach((documentSnapshot) => {\r\n            events.push({\r\n              ...documentSnapshot.data(),\r\n              id: documentSnapshot.id,\r\n            });\r\n          });\r\n          // firestore()\r\n          //   .collection('messages').doc(currentUser).collection(otherUser)\r\n          //   .onSnapshot((querySnapshot) => {\r\n          //     const events: Array<UserI> = [];\r\n          //     querySnapshot.forEach((documentSnapshot) => {\r\n          //       events.push({\r\n          //         ...documentSnapshot.data(),\r\n          //         id: documentSnapshot.id,\r\n          //       });\r\n          //     });\r\n          dispatch({ type: GET_MESSAGE_SUCCESS, payload: events });\r\n\r\n        });\r\n    } catch (error) {\r\n      dispatch({ type: GET_MESSAGE_SUCCESS, payload: [] });\r\n      console.log(error)\r\n      // dispatch({type: GET_FOLLOW_USERS_FAILD, payload: error});\r\n    }\r\n  };\r\n};\r\nexport const getUserChatrooms = (userId: string) => {\r\n  return async (dispatch: Function) => {\r\n    try {\r\n      firestore()\r\n        .collection('chatrooms')\r\n        .where('users', 'array-contains', userId)\r\n        // .orderBy('createdAt')\r\n        .onSnapshot(async (querySnapshot) => {\r\n          let events: Array<UserI> = [];\r\n          querySnapshot?.forEach((documentSnapshot) => {\r\n            events.push({\r\n              ...documentSnapshot.data(),\r\n              id: documentSnapshot.id,\r\n            });\r\n          });\r\n\r\n          // var results: number[] = await Promise.all(arr.map(async (item): Promise<number> => {\r\n          //   await callAsynchronousOperation(item);\r\n          //   return item + 1;\r\n          // }));\r\n          await Promise.all(events.map(async (event, index): Promise<any> => {\r\n            let otherUser = event.users.filter(u => u !== userId)[0]\r\n            const uRef = firestore().collection('users').doc(otherUser);\r\n            const doc = await uRef.get();\r\n            events[index].otherUserData = { ...doc.data(), id: doc.id }\r\n            return\r\n          }))\r\n          dispatch({ type: GET_CHATROOMS_SUCCESS, payload: events });\r\n\r\n        });\r\n    } catch (error) {\r\n      dispatch({ type: GET_CHATROOMS_SUCCESS, payload: [] });\r\n      console.log(error)\r\n      // dispatch({type: GET_FOLLOW_USERS_FAILD, payload: error});\r\n    }\r\n  };\r\n};\r\nexport const addNewStory = (data: any, onSuccessCallback: Function) => {\r\n  return async (dispatch: Function) => {\r\n    dispatch({ type: ADD_STORY_REQUEST });\r\n    try {\r\n      let now = Date.now()\r\n      await firestore()\r\n        .collection('stories').add({\r\n          ...data,\r\n          createdAt: now,\r\n          updatedAt: now,\r\n        })\r\n      onSuccessCallback(true)\r\n      dispatch({ type: ADD_STORY_SUCCESS, payload: true });\r\n    } catch (error) {\r\n      dispatch({ type: ADD_STORY_FAILED, payload: error });\r\n    }\r\n  };\r\n};\r\n\r\nexport const getStories = (userId: string) => {\r\n  return async (dispatch: Function) => {\r\n    try {\r\n      dispatch({ type: GET_STORIES_REQUEST, payload: true });\r\n      firestore()\r\n        .collection('stories')\r\n        .onSnapshot(async (querySnapshot) => {\r\n          let events: any = [];\r\n          let storiesWithUserData: any = [];\r\n          querySnapshot?.forEach((documentSnapshot) => {\r\n            events.push({\r\n              ...documentSnapshot.data(),\r\n              id: documentSnapshot.id,\r\n            });\r\n          });\r\n          let userIdsList = events.map((item: any) => item.userId);//get list of userId's\r\n          userIdsList = [...new Set(userIdsList)] //get unique list of userId's\r\n\r\n          await Promise.all(userIdsList.map(async (userId: any, index: number): Promise<any> => {\r\n            const uRef = firestore().collection('users').doc(userId);\r\n            const user = await uRef.get();\r\n            const userData: any = { ...user.data(), id: user.id }\r\n            storiesWithUserData.push({\r\n              profile: userData.displayPhoto,\r\n              username: userData.name,\r\n              title: userData.name,\r\n              stories: events.map((ev: any) => {\r\n                if (ev.userId == userId) {\r\n                  return { ...ev, type: 'image' };\r\n                }\r\n                return false;\r\n              })\r\n            })\r\n            return\r\n          }))\r\n          dispatch({ type: GET_STORIES_SUCCESS, payload: storiesWithUserData });\r\n        });\r\n    } catch (error) {\r\n      console.log(error)\r\n      dispatch({ type: GET_STORIES_SUCCESS, payload: [] });\r\n    }\r\n  };\r\n};\r\n// export const getMessageFriends = (currentUser) => {\r\n//   console.log(currentUser)\r\n//   return async (dispatch: Function) => {\r\n//     try {\r\n//      let a = firestore()\r\n//         .collection('friends').doc(currentUser).get()\r\n//         console.log(a)\r\n//         // .onSnapshot((querySnapshot) => {\r\n//         //   const events: Array<UserI> = [];\r\n//         //   console.log('sadsdsasd',querySnapshot)\r\n//         //   querySnapshot.forEach((documentSnapshot) => {\r\n//         //       events.push({\r\n//         //         ...documentSnapshot.data(),\r\n//         //         id: documentSnapshot.id,\r\n//         //       });\r\n//         //   });\r\n//           dispatch({type: GET_MESSAGE_FRIEND_SUCCESS, payload: events});\r\n//         });\r\n//     } catch (error) {\r\n//         // dispatch({type: GET_FOLLOW_USERS_FAILD, payload: error});\r\n//     }\r\n//   };\r\n// };"]},"metadata":{},"sourceType":"script"}