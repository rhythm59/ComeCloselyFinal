{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _reactNativeTextinputWithIcons = _interopRequireDefault(require(\"react-native-textinput-with-icons\"));\n\nvar _formik = require(\"formik\");\n\nvar Yup = _interopRequireWildcard(require(\"yup\"));\n\nvar _styles = _interopRequireDefault(require(\"./styles\"));\n\nvar _FormButton = _interopRequireDefault(require(\"../../components/FormButton\"));\n\nvar _FormFieldWrapper = _interopRequireDefault(require(\"../../components/FormFieldWrapper\"));\n\nvar _auth = require(\"../../../state/ducks/auth\");\n\nvar _jsxFileName = \"C:\\\\Program Files\\\\nodejs\\\\ComeClosely\\\\app\\\\views\\\\screens\\\\ForgotPassword\\\\index.tsx\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar INITIAL_STATE = {\n  email: ''\n};\nvar validationSchema = Yup.object().shape({\n  email: Yup.string().label('Email').email('Please enter a username')\n});\n\nvar ForgotPassword = function (_React$Component) {\n  (0, _inherits2.default)(ForgotPassword, _React$Component);\n\n  var _super = _createSuper(ForgotPassword);\n\n  function ForgotPassword(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ForgotPassword);\n    _this = _super.call(this, props);\n\n    _this.handleSubmit = function (values) {\n      console.log('forgot password sumit', values);\n\n      _this.props.forgotPassword(values.email);\n    };\n\n    _this.state = (0, _extends2.default)({}, INITIAL_STATE);\n    return _this;\n  }\n\n  (0, _createClass2.default)(ForgotPassword, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var isLoading = this.props.isLoading;\n      return _react.default.createElement(_reactNative.View, {\n        style: _styles.default.mainView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 7\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: _styles.default.childView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 9\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: _styles.default.forgotTextMainView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }\n      }, _react.default.createElement(_reactNative.Text, {\n        style: _styles.default.forgotText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }\n      }, \"Forgot Password\")), _react.default.createElement(_reactNative.View, {\n        style: _styles.default.descriptionMainView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }\n      }, _react.default.createElement(_reactNative.Text, {\n        style: _styles.default.descriptionText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }\n      }, \"Enter the email address you used to create your \", '\\n', \"account and we will email you a link to reset your\", '\\n', \"password\")), _react.default.createElement(_formik.Formik, {\n        initialValues: INITIAL_STATE,\n        validationSchema: validationSchema,\n        onSubmit: function onSubmit(values) {\n          _this2.handleSubmit(values);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }\n      }, function (formikProps) {\n        return _react.default.createElement(_react.Fragment, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }\n        }, _react.default.createElement(_FormFieldWrapper.default, {\n          formikProps: formikProps,\n          formikKey: \"email\",\n          containerStyles: _styles.default.fieldWrapper,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 17\n          }\n        }, _react.default.createElement(_reactNativeTextinputWithIcons.default, {\n          style: _styles.default.textInput,\n          color: \"#515C6F\",\n          underlineActiveColor: \"#FF2485\",\n          fontFamily: \"Poppins-Regular\",\n          label: \"Email\",\n          labelColor: \"#D4D4D4\",\n          labelActiveColor: \"#FF2485\",\n          containerMaxWidth: \"100%\",\n          value: formikProps.values.email,\n          onChangeText: formikProps.handleChange('email'),\n          onBlur: formikProps.handleBlur('email'),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 19\n          }\n        })), _react.default.createElement(_reactNative.View, {\n          style: _styles.default.buttonSubmitView,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 17\n          }\n        }, _react.default.createElement(_FormButton.default, {\n          title: \"SUBMIT\",\n          containerStyles: _styles.default.buttonSubmit,\n          loading: isLoading,\n          disabled: isLoading || !formikProps.isValid,\n          onPress: formikProps.handleSubmit,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 19\n          }\n        })));\n      })));\n    }\n  }]);\n  return ForgotPassword;\n}(_react.default.Component);\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    forgotPassword: function forgotPassword(email) {\n      return dispatch(_auth.authOperations.forgotPassword(email));\n    }\n  };\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    authError: state.auth.forgotPasswordError,\n    isLoading: state.auth.forgotPasswordLoading\n  };\n};\n\nvar _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(ForgotPassword);\n\nexports.default = _default;","map":{"version":3,"sources":["C:/Program Files/nodejs/ComeClosely/app/views/screens/ForgotPassword/index.tsx"],"names":["INITIAL_STATE","email","validationSchema","Yup","object","shape","string","label","ForgotPassword","props","handleSubmit","values","console","log","forgotPassword","state","isLoading","styles","mainView","childView","forgotTextMainView","forgotText","descriptionMainView","descriptionText","formikProps","fieldWrapper","textInput","handleChange","handleBlur","buttonSubmitView","buttonSubmit","isValid","React","Component","mapDispatchToProps","dispatch","authOperations","mapStateToProps","authError","auth","forgotPasswordError","forgotPasswordLoading"],"mappings":"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","sourcesContent":["import React, {Fragment} from 'react';\nimport {Text, View} from 'react-native';\n\nimport {connect} from 'react-redux';\nimport TextInput from 'react-native-textinput-with-icons';\nimport {Formik} from 'formik';\nimport * as Yup from 'yup';\n\nimport styles from './styles';\nimport FormButton from '../../components/FormButton';\nimport FormFieldWrapper from '../../components/FormFieldWrapper';\nimport {authOperations} from '../../../state/ducks/auth';\n\ninterface ComponentProps {\n  navigation: any;\n  forgotPasswordError: string;\n  isLoading: boolean;\n  forgotPassword(email: string): void;\n}\ninterface ComponentState {\n  email: string;\n}\nconst INITIAL_STATE: ComponentState = {\n  email: '',\n};\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string().label('Email').email('Please enter a username'),\n});\n\nclass ForgotPassword extends React.Component<ComponentProps, ComponentState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {...INITIAL_STATE};\n  }\n\n  handleSubmit = (values: ComponentState) => {\n    console.log('forgot password sumit', values);\n    this.props.forgotPassword(values.email);\n  };\n\n  render() {\n    const {isLoading} = this.props;\n    return (\n      <View style={styles.mainView}>\n        <View style={styles.childView}>\n          <View style={styles.forgotTextMainView}>\n            <Text style={styles.forgotText}>Forgot Password</Text>\n          </View>\n\n          <View style={styles.descriptionMainView}>\n            <Text style={styles.descriptionText}>\n              Enter the email address you used to create your {'\\n'}account and\n              we will email you a link to reset your{'\\n'}password\n            </Text>\n          </View>\n\n          <Formik\n            initialValues={INITIAL_STATE}\n            validationSchema={validationSchema}\n            onSubmit={(values) => {\n              this.handleSubmit(values);\n            }}>\n            {(formikProps) => (\n              <Fragment>\n                <FormFieldWrapper\n                  formikProps={formikProps}\n                  formikKey=\"email\"\n                  containerStyles={styles.fieldWrapper}>\n                  <TextInput\n                    style={styles.textInput}\n                    color=\"#515C6F\"\n                    underlineActiveColor=\"#FF2485\"\n                    fontFamily=\"Poppins-Regular\"\n                    label=\"Email\"\n                    labelColor=\"#D4D4D4\"\n                    labelActiveColor=\"#FF2485\"\n                    containerMaxWidth=\"100%\"\n                    value={formikProps.values.email}\n                    onChangeText={formikProps.handleChange('email')}\n                    onBlur={formikProps.handleBlur('email')}\n                  />\n                </FormFieldWrapper>\n                <View style={styles.buttonSubmitView}>\n                  <FormButton\n                    title=\"SUBMIT\"\n                    containerStyles={styles.buttonSubmit}\n                    loading={isLoading}\n                    disabled={isLoading || !formikProps.isValid}\n                    onPress={formikProps.handleSubmit}\n                  />\n                </View>\n                {/* <TouchableHighlight\n                  underlayColor=\"rgba(0,0,0,0.0)\"\n                  style={styles.submitMainView}\n                  onPress={() => {\n                    this.props.navigation.navigate('EnterNewPassword');\n                  }}>\n                  <Text style={styles.submitText}>SUBMIT</Text>\n                </TouchableHighlight> */}\n              </Fragment>\n            )}\n          </Formik>\n        </View>\n      </View>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Function) => {\n  return {\n    forgotPassword: (email: string) =>\n      dispatch(authOperations.forgotPassword(email)),\n  };\n};\n\nconst mapStateToProps = (state: any) => {\n  return {\n    authError: state.auth.forgotPasswordError,\n    isLoading: state.auth.forgotPasswordLoading,\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ForgotPassword);\n"]},"metadata":{},"sourceType":"script"}