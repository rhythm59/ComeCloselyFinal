{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deleteEvent = exports.addEvent = exports.getEvents = exports.getEventTypes = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _firestore = _interopRequireDefault(require(\"@react-native-firebase/firestore\"));\n\nvar _storage = _interopRequireDefault(require(\"@react-native-firebase/storage\"));\n\nvar _types = require(\"./types\");\n\nvar getEventTypes = function getEventTypes() {\n  return function _callee(dispatch) {\n    return _regenerator.default.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch({\n              type: _types.GET_EVENT_TYPES_REQUEST\n            });\n\n            try {\n              (0, _firestore.default)().collection('eventTypes').onSnapshot(function (querySnapshot) {\n                var eventTypes = [];\n                querySnapshot.forEach(function (documentSnapshot) {\n                  eventTypes.push((0, _extends2.default)({}, documentSnapshot.data(), {\n                    id: documentSnapshot.id\n                  }));\n                });\n                dispatch({\n                  type: _types.GET_EVENT_TYPES_SUCCESS,\n                  payload: eventTypes\n                });\n              });\n            } catch (error) {\n              dispatch({\n                type: _types.GET_EVENT_TYPES_FAILED,\n                payload: error\n              });\n            }\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nexports.getEventTypes = getEventTypes;\n\nvar getEvents = function getEvents() {\n  return function _callee2(dispatch) {\n    return _regenerator.default.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            dispatch({\n              type: _types.GET_EVENTS_REQUEST\n            });\n\n            try {\n              (0, _firestore.default)().collection('events').onSnapshot(function (querySnapshot) {\n                var events = [];\n                querySnapshot.forEach(function (documentSnapshot) {\n                  events.push((0, _extends2.default)({}, documentSnapshot.data(), {\n                    id: documentSnapshot.id\n                  }));\n                });\n                dispatch({\n                  type: _types.GET_EVENTS_SUCCESS,\n                  payload: events\n                });\n              });\n            } catch (error) {\n              dispatch({\n                type: _types.GET_EVENTS_FAILED,\n                payload: error\n              });\n            }\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nexports.getEvents = getEvents;\n\nvar addEvent = function addEvent(event, onAddEventSuccess) {\n  return function _callee3(dispatch) {\n    var now, coverPhotoReference, eventRef;\n    return _regenerator.default.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            dispatch({\n              type: _types.ADD_EVENT_REQUEST\n            });\n            _context3.prev = 1;\n            now = Date.now();\n\n            if (!(event.coverPhoto && event.coverPhoto !== '')) {\n              _context3.next = 10;\n              break;\n            }\n\n            coverPhotoReference = (0, _storage.default)().ref(\"eventCovers/\" + now + \".png\");\n            _context3.next = 7;\n            return _regenerator.default.awrap(coverPhotoReference.putFile(event.coverPhoto));\n\n          case 7:\n            _context3.next = 9;\n            return _regenerator.default.awrap((0, _storage.default)().ref(\"eventCovers/\" + now + \".png\").getDownloadURL());\n\n          case 9:\n            event.coverPhoto = _context3.sent;\n\n          case 10:\n            eventRef = (0, _firestore.default)().collection('events').doc();\n            event = (0, _extends2.default)({}, event, {\n              createdAt: now,\n              updatedAt: now\n            });\n            _context3.next = 14;\n            return _regenerator.default.awrap(eventRef.set(event));\n\n          case 14:\n            onAddEventSuccess(true);\n            dispatch({\n              type: _types.ADD_EVENT_SUCCESS\n            });\n            _context3.next = 21;\n            break;\n\n          case 18:\n            _context3.prev = 18;\n            _context3.t0 = _context3[\"catch\"](1);\n            dispatch({\n              type: _types.ADD_EVENT_FAILED,\n              payload: _context3.t0\n            });\n\n          case 21:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[1, 18]], Promise);\n  };\n};\n\nexports.addEvent = addEvent;\n\nvar deleteEvent = function deleteEvent(id) {\n  return function _callee4(dispatch) {\n    return _regenerator.default.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            dispatch({\n              type: _types.DELETE_EVENT_REQUEST\n            });\n            _context4.prev = 1;\n            _context4.next = 4;\n            return _regenerator.default.awrap((0, _firestore.default)().collection('events').doc(id).delete());\n\n          case 4:\n            dispatch({\n              type: _types.DELETE_EVENT_SUCCESS\n            });\n            _context4.next = 10;\n            break;\n\n          case 7:\n            _context4.prev = 7;\n            _context4.t0 = _context4[\"catch\"](1);\n            dispatch({\n              type: _types.DELETE_EVENT_FAILED,\n              payload: _context4.t0\n            });\n\n          case 10:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, [[1, 7]], Promise);\n  };\n};\n\nexports.deleteEvent = deleteEvent;","map":{"version":3,"sources":["C:/Program Files/nodejs/ComeClosely/app/state/ducks/event/actions.ts"],"names":["getEventTypes","dispatch","type","GET_EVENT_TYPES_REQUEST","collection","onSnapshot","querySnapshot","eventTypes","forEach","documentSnapshot","push","data","id","GET_EVENT_TYPES_SUCCESS","payload","error","GET_EVENT_TYPES_FAILED","getEvents","GET_EVENTS_REQUEST","events","GET_EVENTS_SUCCESS","GET_EVENTS_FAILED","addEvent","event","onAddEventSuccess","ADD_EVENT_REQUEST","now","Date","coverPhoto","coverPhotoReference","ref","putFile","getDownloadURL","eventRef","doc","createdAt","updatedAt","set","ADD_EVENT_SUCCESS","ADD_EVENT_FAILED","deleteEvent","DELETE_EVENT_REQUEST","delete","DELETE_EVENT_SUCCESS","DELETE_EVENT_FAILED"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AAGA;;AAeO,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACjC,SAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AACLA,YAAAA,QAAQ,CAAC;AAAEC,cAAAA,IAAI,EAAEC;AAAR,aAAD,CAAR;;AACA,gBAAI;AACF,wCACGC,UADH,CACc,YADd,EAEGC,UAFH,CAEc,UAACC,aAAD,EAAmB;AAC7B,oBAAMC,UAA6B,GAAG,EAAtC;AAEAD,gBAAAA,aAAa,CAACE,OAAd,CAAsB,UAACC,gBAAD,EAAsB;AAC1CF,kBAAAA,UAAU,CAACG,IAAX,4BACKD,gBAAgB,CAACE,IAAjB,EADL;AAEEC,oBAAAA,EAAE,EAAEH,gBAAgB,CAACG;AAFvB;AAID,iBALD;AAOAX,gBAAAA,QAAQ,CAAC;AAAEC,kBAAAA,IAAI,EAAEW,8BAAR;AAAiCC,kBAAAA,OAAO,EAAEP;AAA1C,iBAAD,CAAR;AACD,eAbH;AAcD,aAfD,CAeE,OAAOQ,KAAP,EAAc;AACdd,cAAAA,QAAQ,CAAC;AAAEC,gBAAAA,IAAI,EAAEc,6BAAR;AAAgCF,gBAAAA,OAAO,EAAEC;AAAzC,eAAD,CAAR;AACD;;AAnBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAqBD,CAtBM;;;;AAwBA,IAAME,SAAS,GAAG,SAAZA,SAAY,GAAM;AAC7B,SAAO,kBAAOhB,QAAP;AAAA;AAAA;AAAA;AAAA;AACLA,YAAAA,QAAQ,CAAC;AAAEC,cAAAA,IAAI,EAAEgB;AAAR,aAAD,CAAR;;AACA,gBAAI;AACF,wCACGd,UADH,CACc,QADd,EAEGC,UAFH,CAEc,UAACC,aAAD,EAAmB;AAC7B,oBAAMa,MAAqB,GAAG,EAA9B;AAEAb,gBAAAA,aAAa,CAACE,OAAd,CAAsB,UAACC,gBAAD,EAAsB;AAC1CU,kBAAAA,MAAM,CAACT,IAAP,4BACKD,gBAAgB,CAACE,IAAjB,EADL;AAEEC,oBAAAA,EAAE,EAAEH,gBAAgB,CAACG;AAFvB;AAID,iBALD;AAOAX,gBAAAA,QAAQ,CAAC;AAAEC,kBAAAA,IAAI,EAAEkB,yBAAR;AAA4BN,kBAAAA,OAAO,EAAEK;AAArC,iBAAD,CAAR;AACD,eAbH;AAcD,aAfD,CAeE,OAAOJ,KAAP,EAAc;AACdd,cAAAA,QAAQ,CAAC;AAAEC,gBAAAA,IAAI,EAAEmB,wBAAR;AAA2BP,gBAAAA,OAAO,EAAEC;AAApC,eAAD,CAAR;AACD;;AAnBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAqBD,CAtBM;;;;AAwBA,IAAMO,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAgBC,iBAAhB,EAA2C;AACjE,SAAO,kBAAOvB,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACLA,YAAAA,QAAQ,CAAC;AAAEC,cAAAA,IAAI,EAAEuB;AAAR,aAAD,CAAR;AADK;AAGGC,YAAAA,GAHH,GAGSC,IAAI,CAACD,GAAL,EAHT;;AAAA,kBAICH,KAAK,CAACK,UAAN,IAAoBL,KAAK,CAACK,UAAN,KAAqB,EAJ1C;AAAA;AAAA;AAAA;;AAKKC,YAAAA,mBALL,GAK2B,wBAAUC,GAAV,kBAA6BJ,GAA7B,UAL3B;AAAA;AAAA,8CAMKG,mBAAmB,CAACE,OAApB,CAA4BR,KAAK,CAACK,UAAlC,CANL;;AAAA;AAAA;AAAA,8CAOwB,wBACtBE,GADsB,kBACHJ,GADG,WAEtBM,cAFsB,EAPxB;;AAAA;AAODT,YAAAA,KAAK,CAACK,UAPL;;AAAA;AAYGK,YAAAA,QAZH,GAYc,0BAAY7B,UAAZ,CAAuB,QAAvB,EAAiC8B,GAAjC,EAZd;AAaHX,YAAAA,KAAK,8BACAA,KADA;AAEHY,cAAAA,SAAS,EAAET,GAFR;AAGHU,cAAAA,SAAS,EAAEV;AAHR,cAAL;AAbG;AAAA,8CAkBGO,QAAQ,CAACI,GAAT,CAAad,KAAb,CAlBH;;AAAA;AAmBHC,YAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACAvB,YAAAA,QAAQ,CAAC;AAAEC,cAAAA,IAAI,EAAEoC;AAAR,aAAD,CAAR;AApBG;AAAA;;AAAA;AAAA;AAAA;AAsBHrC,YAAAA,QAAQ,CAAC;AAAEC,cAAAA,IAAI,EAAEqC,uBAAR;AAA0BzB,cAAAA,OAAO;AAAjC,aAAD,CAAR;;AAtBG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAyBD,CA1BM;;;;AA4BA,IAAM0B,WAAW,GAAG,SAAdA,WAAc,CAAC5B,EAAD,EAAgB;AACzC,SAAO,kBAAOX,QAAP;AAAA;AAAA;AAAA;AAAA;AACLA,YAAAA,QAAQ,CAAC;AAAEC,cAAAA,IAAI,EAAEuC;AAAR,aAAD,CAAR;AADK;AAAA;AAAA,8CAGG,0BAAYrC,UAAZ,CAAuB,QAAvB,EAAiC8B,GAAjC,CAAqCtB,EAArC,EAAyC8B,MAAzC,EAHH;;AAAA;AAIHzC,YAAAA,QAAQ,CAAC;AAAEC,cAAAA,IAAI,EAAEyC;AAAR,aAAD,CAAR;AAJG;AAAA;;AAAA;AAAA;AAAA;AAMH1C,YAAAA,QAAQ,CAAC;AAAEC,cAAAA,IAAI,EAAE0C,0BAAR;AAA6B9B,cAAAA,OAAO;AAApC,aAAD,CAAR;;AANG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AASD,CAVM","sourcesContent":["import firestore from '@react-native-firebase/firestore';\r\nimport storage from '@react-native-firebase/storage';\r\n\r\nimport { EventI, EventTypeI } from './../../types';\r\nimport {\r\n  GET_EVENT_TYPES_REQUEST,\r\n  GET_EVENT_TYPES_SUCCESS,\r\n  GET_EVENT_TYPES_FAILED,\r\n  GET_EVENTS_REQUEST,\r\n  GET_EVENTS_SUCCESS,\r\n  GET_EVENTS_FAILED,\r\n  ADD_EVENT_REQUEST,\r\n  ADD_EVENT_SUCCESS,\r\n  ADD_EVENT_FAILED,\r\n  DELETE_EVENT_REQUEST,\r\n  DELETE_EVENT_SUCCESS,\r\n  DELETE_EVENT_FAILED,\r\n} from './types';\r\n\r\nexport const getEventTypes = () => {\r\n  return async (dispatch: Function) => {\r\n    dispatch({ type: GET_EVENT_TYPES_REQUEST });\r\n    try {\r\n      firestore()\r\n        .collection('eventTypes')\r\n        .onSnapshot((querySnapshot) => {\r\n          const eventTypes: Array<EventTypeI> = [];\r\n\r\n          querySnapshot.forEach((documentSnapshot) => {\r\n            eventTypes.push({\r\n              ...documentSnapshot.data(),\r\n              id: documentSnapshot.id,\r\n            });\r\n          });\r\n\r\n          dispatch({ type: GET_EVENT_TYPES_SUCCESS, payload: eventTypes });\r\n        });\r\n    } catch (error) {\r\n      dispatch({ type: GET_EVENT_TYPES_FAILED, payload: error });\r\n    }\r\n  };\r\n};\r\n\r\nexport const getEvents = () => {\r\n  return async (dispatch: Function) => {\r\n    dispatch({ type: GET_EVENTS_REQUEST });\r\n    try {\r\n      firestore()\r\n        .collection('events')\r\n        .onSnapshot((querySnapshot) => {\r\n          const events: Array<EventI> = [];\r\n\r\n          querySnapshot.forEach((documentSnapshot) => {\r\n            events.push({\r\n              ...documentSnapshot.data(),\r\n              id: documentSnapshot.id,\r\n            });\r\n          });\r\n\r\n          dispatch({ type: GET_EVENTS_SUCCESS, payload: events });\r\n        });\r\n    } catch (error) {\r\n      dispatch({ type: GET_EVENTS_FAILED, payload: error });\r\n    }\r\n  };\r\n};\r\n\r\nexport const addEvent = (event: EventI, onAddEventSuccess: any) => {\r\n  return async (dispatch: Function) => {\r\n    dispatch({ type: ADD_EVENT_REQUEST });\r\n    try {\r\n      const now = Date.now();\r\n      if (event.coverPhoto && event.coverPhoto !== '') {\r\n        const coverPhotoReference = storage().ref(`eventCovers/${now}.png`);\r\n        await coverPhotoReference.putFile(event.coverPhoto);\r\n        event.coverPhoto = await storage()\r\n          .ref(`eventCovers/${now}.png`)\r\n          .getDownloadURL();\r\n      }\r\n\r\n      const eventRef = firestore().collection('events').doc();\r\n      event = {\r\n        ...event,\r\n        createdAt: now,\r\n        updatedAt: now,\r\n      };\r\n      await eventRef.set(event);\r\n      onAddEventSuccess(true)\r\n      dispatch({ type: ADD_EVENT_SUCCESS });\r\n    } catch (error) {\r\n      dispatch({ type: ADD_EVENT_FAILED, payload: error });\r\n    }\r\n  };\r\n};\r\n\r\nexport const deleteEvent = (id: string) => {\r\n  return async (dispatch: Function) => {\r\n    dispatch({ type: DELETE_EVENT_REQUEST });\r\n    try {\r\n      await firestore().collection('events').doc(id).delete();\r\n      dispatch({ type: DELETE_EVENT_SUCCESS });\r\n    } catch (error) {\r\n      dispatch({ type: DELETE_EVENT_FAILED, payload: error });\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"script"}