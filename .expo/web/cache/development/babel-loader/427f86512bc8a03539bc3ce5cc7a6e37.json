{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeAutoscrollFlatlist = _interopRequireDefault(require(\"react-native-autoscroll-flatlist\"));\n\nvar _config = require(\"../../config\");\n\nvar _styles = _interopRequireDefault(require(\"./styles\"));\n\nvar _user = require(\"../../../state/ducks/user\");\n\nvar _auth = require(\"../../../providers/auth\");\n\nvar _services = require(\"../../../services/\");\n\nvar _utils = require(\"../../../utils\");\n\nvar _jsxFileName = \"C:\\\\Program Files\\\\nodejs\\\\ComeClosely\\\\app\\\\views\\\\screens\\\\Messages\\\\index.tsx\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar Messages = function (_Component) {\n  (0, _inherits2.default)(Messages, _Component);\n\n  var _super = _createSuper(Messages);\n\n  function Messages() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, Messages);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      input: ''\n    };\n\n    _this.onNewChatroomCreated = function (chatroomId) {\n      _this.setState({\n        chatroomId: chatroomId\n      });\n\n      _this.props.getMessages(chatroomId);\n    };\n\n    _this.renderItem = function (_ref) {\n      var item = _ref.item;\n      var otherUser = _this.props.user;\n      var currentUser = _this.context.currentUser.uid;\n      var time = (0, _utils.formatAMPM)(new Date(item.createdAt));\n\n      if (item.sender == currentUser) {\n        return _react.default.createElement(_reactNative.View, {\n          style: _styles.default.senderContentView,\n          __self: (0, _assertThisInitialized2.default)(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 9\n          }\n        }, _react.default.createElement(_reactNative.View, {\n          style: _styles.default.senderContentDate,\n          __self: (0, _assertThisInitialized2.default)(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 11\n          }\n        }), _react.default.createElement(_reactNative.View, {\n          style: {\n            paddingLeft: 8,\n            flex: 7\n          },\n          __self: (0, _assertThisInitialized2.default)(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 11\n          }\n        }, _react.default.createElement(_reactNative.View, {\n          style: [_styles.default.senderContentMessage, {\n            backgroundColor: '#CF326F'\n          }],\n          __self: (0, _assertThisInitialized2.default)(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }\n        }, _react.default.createElement(_reactNative.Text, {\n          style: _styles.default.senderCretedTimeText,\n          numberOfLines: 1,\n          __self: (0, _assertThisInitialized2.default)(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }\n        }, time), _react.default.createElement(_reactNative.Text, {\n          style: _styles.default.massageText,\n          __self: (0, _assertThisInitialized2.default)(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }\n        }, item.message))));\n      }\n\n      return _react.default.createElement(_reactNative.View, {\n        style: _styles.default.receiverContentView,\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 7\n        }\n      }, _react.default.createElement(_reactNative.Image, {\n        source: otherUser.displayPhoto ? {\n          uri: otherUser.displayPhoto\n        } : _config.AppImages.loginImage,\n        style: _styles.default.avatar,\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }\n      }), _react.default.createElement(_reactNative.View, {\n        style: {\n          paddingHorizontal: 8,\n          flex: 7\n        },\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 9\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: [_styles.default.receiverContentMessageView, {\n          backgroundColor: '#7D00E7'\n        }],\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }\n      }, _react.default.createElement(_reactNative.Text, {\n        style: _styles.default.receiverCretedTimeText,\n        numberOfLines: 1,\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }\n      }, time), _react.default.createElement(_reactNative.Text, {\n        style: _styles.default.massageText,\n        __self: (0, _assertThisInitialized2.default)(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }\n      }, item.message))));\n    };\n\n    _this.sendMessage = function () {\n      var otherUser = _this.props.userToView;\n      var currentUser = _this.context.currentUser.uid;\n      var _this$state = _this.state,\n          chatroomId = _this$state.chatroomId,\n          input = _this$state.input;\n\n      _this.setState({\n        input: ''\n      });\n\n      _this.props.sendMessage(chatroomId, currentUser, otherUser, input, _this.onNewChatroomCreated);\n    };\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(Messages, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var userKey, otherUserKey, chatroomData;\n      return _regenerator.default.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              this._unsubscribe = this.props.navigation.addListener('blur', function () {\n                if (!_this2.state.ignoreResetUser) {\n                  _this2.props.getUser(_this2.context.currentUser.uid);\n\n                  _this2.props.setViewUser(null);\n                }\n\n                _this2._unsubscribe();\n              });\n              userKey = this.context.currentUser.uid;\n              otherUserKey = this.props.userToView;\n              console.log(otherUserKey);\n              this.props.getUser(otherUserKey);\n              _context.next = 7;\n              return _regenerator.default.awrap(_services.ChatroomServices.getChatroomByUsers(userKey, otherUserKey));\n\n            case 7:\n              chatroomData = _context.sent;\n\n              if (chatroomData) {\n                this.setState({\n                  chatroomId: chatroomData.id\n                });\n                this.props.getMessages(chatroomData.id);\n              }\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var otherUser = this.props.user;\n      return _react.default.createElement(_reactNative.SafeAreaView, {\n        style: _styles.default.mainView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 7\n        }\n      }, _react.default.createElement(_reactNative.ImageBackground, {\n        source: _config.AppImages.homeNavigation,\n        style: _styles.default.homeNavigationImg,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 9\n        }\n      }), _react.default.createElement(_reactNative.KeyboardAvoidingView, {\n        enabled: _reactNative.Platform.OS === 'ios' ? true : false,\n        behavior: \"padding\",\n        style: _styles.default.keyboardAvoiding,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 9\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: _styles.default.headerView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: _styles.default.headerSubView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }\n      }, _react.default.createElement(_reactNative.Text, {\n        style: _styles.default.titleHeaderText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 15\n        }\n      }, \" \", otherUser.name), _react.default.createElement(_reactNative.View, {\n        style: {\n          flex: 1\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 15\n        }\n      }, _react.default.createElement(_reactNative.TouchableOpacity, {\n        onPress: function onPress() {\n          _this3.props.navigation.goBack();\n        },\n        style: _styles.default.closeButtonView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 17\n        }\n      }, _react.default.createElement(_reactNative.Image, {\n        source: _config.AppImages.close,\n        style: _styles.default.closeImg,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 19\n        }\n      }))))), _react.default.createElement(_reactNative.View, {\n        style: _styles.default.chatMainView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }\n      }, _react.default.createElement(_reactNativeAutoscrollFlatlist.default, {\n        data: this.props.userMessages,\n        keyExtractor: function keyExtractor(item) {\n          return item.id.toString();\n        },\n        renderItem: this.renderItem,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }\n      }), _react.default.createElement(_reactNative.View, {\n        style: _styles.default.inputContent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: _styles.default.textInputMainView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 15\n        }\n      }, _react.default.createElement(_reactNative.KeyboardAvoidingView, {\n        behavior: \"padding\",\n        style: _styles.default.keyboardAvoiding,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 17\n        }\n      }, _react.default.createElement(_reactNative.TextInput, {\n        onChangeText: function onChangeText(input) {\n          return _this3.setState({\n            input: input\n          });\n        },\n        placeholder: 'type_message',\n        value: this.state.input,\n        placeholderTextColor: 'rgba(255,255,255,0.7)',\n        style: _styles.default.textInputSendMassage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 19\n        }\n      }))), _react.default.createElement(_reactNative.TouchableOpacity, {\n        style: _styles.default.sendIcon,\n        onPress: this.sendMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 15\n        }\n      }, _react.default.createElement(_reactNative.Image, {\n        style: _styles.default.sendImg,\n        source: _config.AppImages.sendButton,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 17\n        }\n      }))))));\n    }\n  }]);\n  return Messages;\n}(_react.Component);\n\nMessages.contextType = _auth.AuthContext;\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    getUser: function getUser(id) {\n      return dispatch(_user.userOperations.getUser(id));\n    },\n    sendMessage: function sendMessage(chatroomId, userKey, otherUserKey, message, onNewChatroomCreated) {\n      return dispatch(_user.userOperations.sendMessage(chatroomId, userKey, otherUserKey, message, onNewChatroomCreated));\n    },\n    getMessages: function getMessages(chatroomId) {\n      return dispatch(_user.userOperations.getMessages(chatroomId));\n    },\n    setViewUser: function setViewUser(key) {\n      return dispatch(_user.userOperations.viewUser(key));\n    }\n  };\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  console.log(state);\n  return {\n    user: state.user.user,\n    userToView: state.user.userToView,\n    userMessages: state.user.userMessages\n  };\n};\n\nvar _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Messages);\n\nexports.default = _default;","map":{"version":3,"sources":["C:/Program Files/nodejs/ComeClosely/app/views/screens/Messages/index.tsx"],"names":["Messages","state","input","onNewChatroomCreated","chatroomId","setState","props","getMessages","renderItem","item","otherUser","user","currentUser","context","uid","time","Date","createdAt","sender","styles","senderContentView","senderContentDate","paddingLeft","flex","senderContentMessage","backgroundColor","senderCretedTimeText","massageText","message","receiverContentView","displayPhoto","uri","AppImages","loginImage","avatar","paddingHorizontal","receiverContentMessageView","receiverCretedTimeText","sendMessage","userToView","_unsubscribe","navigation","addListener","ignoreResetUser","getUser","setViewUser","userKey","otherUserKey","console","log","ChatroomServices","getChatroomByUsers","chatroomData","id","mainView","homeNavigation","homeNavigationImg","Platform","OS","keyboardAvoiding","headerView","headerSubView","titleHeaderText","name","goBack","closeButtonView","close","closeImg","chatMainView","userMessages","toString","inputContent","textInputMainView","textInputSendMassage","sendIcon","sendImg","sendButton","Component","contextType","AuthContext","mapDispatchToProps","dispatch","userOperations","key","viewUser","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Component } from 'react';\r\nimport { useSelector, useDispatch, connect } from 'react-redux';\r\nimport {\r\n  SafeAreaView,\r\n  Image,\r\n  Text,\r\n  TextInput,\r\n  View,\r\n  TouchableOpacity,\r\n  KeyboardAvoidingView,\r\n  Platform,\r\n  ImageBackground,\r\n} from 'react-native';\r\n\r\nimport AutoScrollFlatList from 'react-native-autoscroll-flatlist';\r\n\r\nimport { AppImages } from '../../config';\r\nimport styles from './styles';\r\nimport { userOperations } from '../../../state/ducks/user';\r\nimport { AuthContext } from '../../../providers/auth';\r\nimport { UserServices, ChatroomServices } from '../../../services/';\r\nimport { formatAMPM } from '../../../utils';\r\n\r\n\r\n\r\n// const SCREEN_WIDTH = Dimensions.get('window').width;\r\n// export default Component Messages({ navigation }: any) {\r\nclass Messages extends Component {\r\n  state = {\r\n    input: '',\r\n  }\r\n  onNewChatroomCreated = (chatroomId) => {\r\n    this.setState({ chatroomId })\r\n    this.props.getMessages(chatroomId)\r\n  }\r\n\r\n\r\n  async componentDidMount() {\r\n    this._unsubscribe = this.props.navigation.addListener('blur', () => {\r\n      if (!this.state.ignoreResetUser) {\r\n        this.props.getUser(this.context.currentUser.uid)\r\n        this.props.setViewUser(null)\r\n      }\r\n      this._unsubscribe();\r\n      // do something\r\n    });\r\n    const userKey = this.context.currentUser.uid;\r\n    const otherUserKey = this.props.userToView;\r\n    console.log(otherUserKey)\r\n    this.props.getUser(otherUserKey)\r\n    let chatroomData = await ChatroomServices.getChatroomByUsers(userKey, otherUserKey)\r\n    // const chatroomId = this.props.route?.params?.chatroomId || generateNewChatRoomKey(userKey, otherUserKey);\r\n    if (chatroomData) {\r\n      this.setState({ chatroomId: chatroomData.id })\r\n      this.props.getMessages(chatroomData.id)\r\n    }\r\n  }\r\n\r\n  renderItem = ({ item }) => {\r\n    const otherUser = this.props.user;\r\n    const currentUser = this.context.currentUser.uid;\r\n    const time = formatAMPM(new Date(item.createdAt))\r\n    if (item.sender == currentUser) {\r\n      return (\r\n        <View style={styles.senderContentView}>\r\n          <View style={styles.senderContentDate}></View>\r\n          <View style={{ paddingLeft: 8, flex: 7 }}>\r\n            <View\r\n              style={[styles.senderContentMessage, { backgroundColor: '#CF326F' }]}>\r\n              <Text style={styles.senderCretedTimeText} numberOfLines={1}>\r\n                {time}\r\n              </Text>\r\n              <Text style={styles.massageText}>{item.message}</Text>\r\n            </View>\r\n          </View>\r\n        </View>\r\n      );\r\n    }\r\n    return (\r\n      <View style={styles.receiverContentView}>\r\n        <Image source={otherUser.displayPhoto ? { uri: otherUser.displayPhoto } : AppImages.loginImage} style={styles.avatar} />\r\n        <View style={{ paddingHorizontal: 8, flex: 7 }}>\r\n          {/* <Text >{item.user.name}</Text> */}\r\n          <View\r\n            style={[\r\n              styles.receiverContentMessageView,\r\n              { backgroundColor: '#7D00E7' },\r\n            ]}>\r\n            <Text style={styles.receiverCretedTimeText} numberOfLines={1}>\r\n              {time}\r\n            </Text>\r\n            <Text style={styles.massageText}>{item.message}</Text>\r\n          </View>\r\n        </View>\r\n        {/* <View style={styles.receiverContentDate}></View> */}\r\n      </View>\r\n    );\r\n\r\n\r\n\r\n  };\r\n  sendMessage = () => {\r\n    const otherUser = this.props.userToView;\r\n    const currentUser = this.context.currentUser.uid;\r\n    const { chatroomId, input } = this.state;\r\n    this.setState({ input: '' })\r\n    this.props.sendMessage(chatroomId, currentUser, otherUser, input, this.onNewChatroomCreated)\r\n  };\r\n\r\n  render() {\r\n    const otherUser = this.props.user;\r\n    return (\r\n      <SafeAreaView style={styles.mainView} >\r\n        <ImageBackground\r\n          source={AppImages.homeNavigation}\r\n          style={styles.homeNavigationImg}></ImageBackground>\r\n        <KeyboardAvoidingView\r\n          enabled={Platform.OS === 'ios' ? true : false}\r\n          behavior=\"padding\"\r\n          style={styles.keyboardAvoiding}>\r\n          <View style={styles.headerView}>\r\n            <View style={styles.headerSubView}>\r\n              <Text style={styles.titleHeaderText}> {otherUser.name}</Text>\r\n              <View style={{ flex: 1 }}>\r\n                <TouchableOpacity\r\n                  onPress={() => {\r\n                    this.props.navigation.goBack();\r\n                  }}\r\n                  style={styles.closeButtonView}>\r\n                  <Image source={AppImages.close} style={styles.closeImg}></Image>\r\n                </TouchableOpacity>\r\n              </View>\r\n            </View>\r\n          </View>\r\n          <View style={styles.chatMainView}>\r\n            <AutoScrollFlatList\r\n              data={this.props.userMessages}\r\n              keyExtractor={(item) => item.id.toString()}\r\n              renderItem={this.renderItem}\r\n            />\r\n            <View style={styles.inputContent}>\r\n              <View style={styles.textInputMainView}>\r\n                <KeyboardAvoidingView\r\n                  behavior=\"padding\"\r\n                  style={styles.keyboardAvoiding}>\r\n                  <TextInput\r\n                    onChangeText={(input) => this.setState({ input })}\r\n                    // onSubmitEditing={() => sendMessage()}\r\n                    placeholder={'type_message'}\r\n                    value={this.state.input}\r\n                    placeholderTextColor={'rgba(255,255,255,0.7)'}\r\n                    style={styles.textInputSendMassage}\r\n                  />\r\n                </KeyboardAvoidingView>\r\n              </View>\r\n              <TouchableOpacity style={styles.sendIcon} onPress={this.sendMessage}>\r\n                <Image\r\n                  style={styles.sendImg}\r\n                  source={AppImages.sendButton}></Image>\r\n              </TouchableOpacity>\r\n            </View>\r\n          </View>\r\n        </KeyboardAvoidingView>\r\n      </SafeAreaView>\r\n    )\r\n  }\r\n}\r\nMessages.contextType = AuthContext;\r\n\r\nconst mapDispatchToProps = (dispatch: Function) => {\r\n  return {\r\n    getUser: (id: string) => dispatch(userOperations.getUser(id)),\r\n    sendMessage: (chatroomId: string, userKey: string, otherUserKey: string, message: string, onNewChatroomCreated: any) => dispatch(userOperations.sendMessage(chatroomId, userKey, otherUserKey, message, onNewChatroomCreated)),\r\n    getMessages: (chatroomId: string) => dispatch(userOperations.getMessages(chatroomId)),\r\n    setViewUser: (key: string) => dispatch(userOperations.viewUser(key))\r\n  };\r\n};\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  console.log(state)\r\n  return {\r\n    user: state.user.user,\r\n    userToView: state.user.userToView,\r\n    userMessages: state.user.userMessages,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Messages);\r\n"]},"metadata":{},"sourceType":"script"}