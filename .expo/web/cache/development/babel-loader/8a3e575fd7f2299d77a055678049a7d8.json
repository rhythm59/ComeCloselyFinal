{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.ProgressCircle = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _art = require(\"@react-native-community/art\");\n\nvar _Arc = _interopRequireDefault(require(\"./Shapes/Arc\"));\n\nvar _withAnimation = _interopRequireDefault(require(\"./withAnimation\"));\n\nvar _jsxFileName = \"C:\\\\Program Files\\\\nodejs\\\\ComeClosely\\\\node_modules\\\\react-native-progress\\\\Circle.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar CIRCLE = Math.PI * 2;\n\nvar AnimatedSurface = _reactNative.Animated.createAnimatedComponent(_art.Surface);\n\nvar AnimatedArc = _reactNative.Animated.createAnimatedComponent(_Arc.default);\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    backgroundColor: 'transparent',\n    overflow: 'hidden'\n  }\n});\n\nvar ProgressCircle = function (_Component) {\n  (0, _inherits2.default)(ProgressCircle, _Component);\n\n  var _super = _createSuper(ProgressCircle);\n\n  function ProgressCircle(props, context) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ProgressCircle);\n    _this = _super.call(this, props, context);\n    _this.progressValue = 0;\n    return _this;\n  }\n\n  (0, _createClass2.default)(ProgressCircle, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (this.props.animated) {\n        this.props.progress.addListener(function (event) {\n          _this2.progressValue = event.value;\n\n          if (_this2.props.showsText || _this2.progressValue === 1) {\n            _this2.forceUpdate();\n          }\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          animated = _this$props.animated,\n          borderColor = _this$props.borderColor,\n          borderWidth = _this$props.borderWidth,\n          color = _this$props.color,\n          children = _this$props.children,\n          direction = _this$props.direction,\n          fill = _this$props.fill,\n          formatText = _this$props.formatText,\n          indeterminate = _this$props.indeterminate,\n          progress = _this$props.progress,\n          rotation = _this$props.rotation,\n          showsText = _this$props.showsText,\n          size = _this$props.size,\n          style = _this$props.style,\n          strokeCap = _this$props.strokeCap,\n          textStyle = _this$props.textStyle,\n          thickness = _this$props.thickness,\n          unfilledColor = _this$props.unfilledColor,\n          endAngle = _this$props.endAngle,\n          allowFontScaling = _this$props.allowFontScaling,\n          restProps = (0, _objectWithoutProperties2.default)(_this$props, [\"animated\", \"borderColor\", \"borderWidth\", \"color\", \"children\", \"direction\", \"fill\", \"formatText\", \"indeterminate\", \"progress\", \"rotation\", \"showsText\", \"size\", \"style\", \"strokeCap\", \"textStyle\", \"thickness\", \"unfilledColor\", \"endAngle\", \"allowFontScaling\"]);\n      var border = borderWidth || (indeterminate ? 1 : 0);\n      var radius = size / 2 - border;\n      var offset = {\n        top: border,\n        left: border\n      };\n      var textOffset = border + thickness;\n      var textSize = size - textOffset * 2;\n      var Surface = rotation ? AnimatedSurface : _art.Surface;\n      var Shape = animated ? AnimatedArc : _Arc.default;\n      var progressValue = animated ? this.progressValue : progress;\n      var angle = animated ? _reactNative.Animated.multiply(progress, CIRCLE) : progress * CIRCLE;\n      return _react.default.createElement(_reactNative.View, (0, _extends2.default)({\n        style: [styles.container, style]\n      }, restProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 7\n        }\n      }), _react.default.createElement(Surface, {\n        width: size,\n        height: size,\n        style: {\n          transform: [{\n            rotate: indeterminate && rotation ? rotation.interpolate({\n              inputRange: [0, 1],\n              outputRange: ['0deg', '360deg']\n            }) : '0deg'\n          }]\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 9\n        }\n      }, unfilledColor && progressValue !== 1 ? _react.default.createElement(Shape, {\n        fill: fill,\n        radius: radius,\n        offset: offset,\n        startAngle: angle,\n        endAngle: CIRCLE,\n        direction: direction,\n        stroke: unfilledColor,\n        strokeWidth: thickness,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }\n      }) : false, !indeterminate ? _react.default.createElement(Shape, {\n        fill: fill,\n        radius: radius,\n        offset: offset,\n        startAngle: 0,\n        endAngle: angle,\n        direction: direction,\n        stroke: color,\n        strokeCap: strokeCap,\n        strokeWidth: thickness,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }\n      }) : false, border ? _react.default.createElement(_Arc.default, {\n        radius: size / 2,\n        startAngle: 0,\n        endAngle: (indeterminate ? endAngle * 2 : 2) * Math.PI,\n        stroke: borderColor || color,\n        strokeCap: strokeCap,\n        strokeWidth: border,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }\n      }) : false), !indeterminate && showsText ? _react.default.createElement(_reactNative.View, {\n        style: {\n          position: 'absolute',\n          left: textOffset,\n          top: textOffset,\n          width: textSize,\n          height: textSize,\n          borderRadius: textSize / 2,\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }\n      }, _react.default.createElement(_reactNative.Text, {\n        style: [{\n          color: color,\n          fontSize: textSize / 4.5,\n          fontWeight: '300'\n        }, textStyle],\n        allowFontScaling: allowFontScaling,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }\n      }, formatText(progressValue))) : false, children);\n    }\n  }]);\n  return ProgressCircle;\n}(_react.Component);\n\nexports.ProgressCircle = ProgressCircle;\nProgressCircle.propTypes = {\n  animated: _propTypes.default.bool,\n  borderColor: _propTypes.default.string,\n  borderWidth: _propTypes.default.number,\n  color: _propTypes.default.string,\n  children: _propTypes.default.node,\n  direction: _propTypes.default.oneOf(['clockwise', 'counter-clockwise']),\n  fill: _propTypes.default.string,\n  formatText: _propTypes.default.func,\n  indeterminate: _propTypes.default.bool,\n  progress: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.instanceOf(_reactNative.Animated.Value)]),\n  rotation: _propTypes.default.instanceOf(_reactNative.Animated.Value),\n  showsText: _propTypes.default.bool,\n  size: _propTypes.default.number,\n  style: _propTypes.default.any,\n  strokeCap: _propTypes.default.oneOf(['butt', 'square', 'round']),\n  textStyle: _propTypes.default.any,\n  thickness: _propTypes.default.number,\n  unfilledColor: _propTypes.default.string,\n  endAngle: _propTypes.default.number,\n  allowFontScaling: _propTypes.default.bool\n};\nProgressCircle.defaultProps = {\n  borderWidth: 1,\n  color: 'rgba(0, 122, 255, 1)',\n  direction: 'clockwise',\n  formatText: function formatText(progress) {\n    return Math.round(progress * 100) + \"%\";\n  },\n  progress: 0,\n  showsText: false,\n  size: 40,\n  thickness: 3,\n  endAngle: 0.9,\n  allowFontScaling: true\n};\n\nvar _default = (0, _withAnimation.default)(ProgressCircle);\n\nexports.default = _default;","map":{"version":3,"sources":["C:/Program Files/nodejs/ComeClosely/node_modules/react-native-progress/Circle.js"],"names":["CIRCLE","Math","PI","AnimatedSurface","Animated","createAnimatedComponent","ARTSurface","AnimatedArc","Arc","styles","StyleSheet","create","container","backgroundColor","overflow","ProgressCircle","props","context","progressValue","animated","progress","addListener","event","value","showsText","forceUpdate","borderColor","borderWidth","color","children","direction","fill","formatText","indeterminate","rotation","size","style","strokeCap","textStyle","thickness","unfilledColor","endAngle","allowFontScaling","restProps","border","radius","offset","top","left","textOffset","textSize","Surface","Shape","angle","multiply","transform","rotate","interpolate","inputRange","outputRange","position","width","height","borderRadius","alignItems","justifyContent","fontSize","fontWeight","Component","propTypes","PropTypes","bool","string","number","node","oneOf","func","oneOfType","instanceOf","Value","any","defaultProps","round"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, StyleSheet, Text, View } from 'react-native';\nimport { Surface as ARTSurface } from '@react-native-community/art';\n\nimport Arc from './Shapes/Arc';\nimport withAnimation from './withAnimation';\n\nconst CIRCLE = Math.PI * 2;\n\nconst AnimatedSurface = Animated.createAnimatedComponent(ARTSurface);\nconst AnimatedArc = Animated.createAnimatedComponent(Arc);\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'transparent',\n    overflow: 'hidden',\n  },\n});\n\nexport class ProgressCircle extends Component {\n  static propTypes = {\n    animated: PropTypes.bool,\n    borderColor: PropTypes.string,\n    borderWidth: PropTypes.number,\n    color: PropTypes.string,\n    children: PropTypes.node,\n    direction: PropTypes.oneOf(['clockwise', 'counter-clockwise']),\n    fill: PropTypes.string,\n    formatText: PropTypes.func,\n    indeterminate: PropTypes.bool,\n    progress: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.instanceOf(Animated.Value),\n    ]),\n    rotation: PropTypes.instanceOf(Animated.Value),\n    showsText: PropTypes.bool,\n    size: PropTypes.number,\n    style: PropTypes.any,\n    strokeCap: PropTypes.oneOf(['butt', 'square', 'round']),\n    textStyle: PropTypes.any,\n    thickness: PropTypes.number,\n    unfilledColor: PropTypes.string,\n    endAngle: PropTypes.number,\n    allowFontScaling: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    borderWidth: 1,\n    color: 'rgba(0, 122, 255, 1)',\n    direction: 'clockwise',\n    formatText: progress => `${Math.round(progress * 100)}%`,\n    progress: 0,\n    showsText: false,\n    size: 40,\n    thickness: 3,\n    endAngle: 0.9,\n    allowFontScaling: true,\n  };\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.progressValue = 0;\n  }\n\n  componentDidMount() {\n    if (this.props.animated) {\n      this.props.progress.addListener(event => {\n        this.progressValue = event.value;\n        if (this.props.showsText || this.progressValue === 1) {\n          this.forceUpdate();\n        }\n      });\n    }\n  }\n\n  render() {\n    const {\n      animated,\n      borderColor,\n      borderWidth,\n      color,\n      children,\n      direction,\n      fill,\n      formatText,\n      indeterminate,\n      progress,\n      rotation,\n      showsText,\n      size,\n      style,\n      strokeCap,\n      textStyle,\n      thickness,\n      unfilledColor,\n      endAngle,\n      allowFontScaling,\n      ...restProps\n    } = this.props;\n\n    const border = borderWidth || (indeterminate ? 1 : 0);\n\n    const radius = size / 2 - border;\n    const offset = {\n      top: border,\n      left: border,\n    };\n    const textOffset = border + thickness;\n    const textSize = size - textOffset * 2;\n\n    const Surface = rotation ? AnimatedSurface : ARTSurface;\n    const Shape = animated ? AnimatedArc : Arc;\n    const progressValue = animated ? this.progressValue : progress;\n    const angle = animated\n      ? Animated.multiply(progress, CIRCLE)\n      : progress * CIRCLE;\n\n    return (\n      <View style={[styles.container, style]} {...restProps}>\n        <Surface\n          width={size}\n          height={size}\n          style={{\n            transform: [\n              {\n                rotate:\n                  indeterminate && rotation\n                    ? rotation.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: ['0deg', '360deg'],\n                      })\n                    : '0deg',\n              },\n            ],\n          }}\n        >\n          {unfilledColor && progressValue !== 1 ? (\n            <Shape\n              fill={fill}\n              radius={radius}\n              offset={offset}\n              startAngle={angle}\n              endAngle={CIRCLE}\n              direction={direction}\n              stroke={unfilledColor}\n              strokeWidth={thickness}\n            />\n          ) : (\n            false\n          )}\n          {!indeterminate ? (\n            <Shape\n              fill={fill}\n              radius={radius}\n              offset={offset}\n              startAngle={0}\n              endAngle={angle}\n              direction={direction}\n              stroke={color}\n              strokeCap={strokeCap}\n              strokeWidth={thickness}\n            />\n          ) : (\n            false\n          )}\n          {border ? (\n            <Arc\n              radius={size / 2}\n              startAngle={0}\n              endAngle={(indeterminate ? endAngle * 2 : 2) * Math.PI}\n              stroke={borderColor || color}\n              strokeCap={strokeCap}\n              strokeWidth={border}\n            />\n          ) : (\n            false\n          )}\n        </Surface>\n        {!indeterminate && showsText ? (\n          <View\n            style={{\n              position: 'absolute',\n              left: textOffset,\n              top: textOffset,\n              width: textSize,\n              height: textSize,\n              borderRadius: textSize / 2,\n              alignItems: 'center',\n              justifyContent: 'center',\n            }}\n          >\n            <Text\n              style={[\n                {\n                  color,\n                  fontSize: textSize / 4.5,\n                  fontWeight: '300',\n                },\n                textStyle,\n              ]}\n              allowFontScaling={allowFontScaling}\n            >\n              {formatText(progressValue)}\n            </Text>\n          </View>\n        ) : (\n          false\n        )}\n        {children}\n      </View>\n    );\n  }\n}\n\nexport default withAnimation(ProgressCircle);\n"]},"metadata":{},"sourceType":"script"}