{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Program Files\\\\nodejs\\\\ComeClosely\\\\app\\\\views\\\\screens\\\\Messenger\\\\components\\\\ProgressBar.tsx\";\n\nvar ProgressBar = function ProgressBar(props) {\n  var index = props.index,\n      currentIndex = props.currentIndex,\n      duration = props.duration,\n      active = props.active;\n\n  var _useState = (0, _react.useState)(0),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      pauseTime = _useState2[0],\n      setPauseTime = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(0),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      startTime = _useState4[0],\n      setStartTime = _useState4[1];\n\n  var scale = (0, _react.useRef)(new _reactNative.Animated.Value(0)).current;\n\n  var _useState5 = (0, _react.useState)(0),\n      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),\n      width = _useState6[0],\n      setWidth = _useState6[1];\n\n  var onLayoutAdded = function onLayoutAdded(evt) {\n    setWidth(evt.width);\n  };\n\n  (0, _react.useEffect)(function () {\n    switch (active) {\n      case 2:\n        return scale.setValue(width);\n\n      case 1:\n        return props.isLoaded && !props.isNewStory ? _reactNative.Animated.timing(scale, {\n          toValue: width,\n          duration: getDuration(),\n          easing: _reactNative.Easing.linear,\n          useNativeDriver: false\n        }).start(function (_ref) {\n          var finished = _ref.finished;\n\n          if (finished) {\n            props.next();\n          }\n        }) : scale.setValue(0);\n\n      case 0:\n        return scale.setValue(0);\n\n      default:\n        return scale.setValue(0);\n    }\n  });\n\n  var getDuration = function getDuration() {\n    var totalPlaytime = duration * 1000;\n\n    if (props.pause) {\n      return 50000;\n    }\n\n    if (pauseTime === null) {\n      return totalPlaytime;\n    }\n\n    var lastTime = pauseTime - startTime;\n    return totalPlaytime - lastTime;\n  };\n\n  (0, _react.useEffect)(function () {\n    if (index === currentIndex) {\n      if (props.pause) {\n        var endtime = Date.now();\n        console.log('endtime', endtime);\n        setPauseTime(endtime);\n      }\n\n      if (startTime === null) {\n        setStartTime(Date.now());\n      }\n    }\n  }, [currentIndex, index, props.pause, startTime]);\n  return _react.default.createElement(_reactNative.View, {\n    onLayout: function onLayout(evt) {\n      return onLayoutAdded(evt.nativeEvent.layout);\n    },\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_reactNative.Animated.View, {\n    style: [styles.container, {\n      width: scale,\n      backgroundColor: index <= currentIndex ? 'white' : '#555',\n      position: 'absolute',\n      top: 0,\n      margin: 0\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }));\n};\n\nProgressBar.propTypes = {\n  index: _propTypes.default.number,\n  currentIndex: _propTypes.default.number\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    height: 4,\n    flex: 1,\n    backgroundColor: '#555',\n    margin: 2\n  }\n});\n\nvar _default = ProgressBar;\nexports.default = _default;","map":{"version":3,"sources":["C:/Program Files/nodejs/ComeClosely/app/views/screens/Messenger/components/ProgressBar.tsx"],"names":["ProgressBar","props","index","currentIndex","duration","active","pauseTime","setPauseTime","startTime","setStartTime","scale","Animated","Value","current","width","setWidth","onLayoutAdded","evt","setValue","isLoaded","isNewStory","timing","toValue","getDuration","easing","Easing","linear","useNativeDriver","start","finished","next","totalPlaytime","pause","lastTime","endtime","Date","now","console","log","nativeEvent","layout","styles","container","backgroundColor","position","top","margin","propTypes","PropTypes","number","StyleSheet","create","height","flex"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport {Animated, Easing, StyleSheet, View} from 'react-native';\nimport PropTypes from 'prop-types';\n\ninterface ComponentProp {\n  index: number;\n  currentIndex: number;\n  duration: number;\n  active: number;\n  isLoaded: boolean;\n  isNewStory: boolean;\n  pause: boolean;\n  next: any;\n}\nconst ProgressBar = (props: ComponentProp) => {\n  const {index, currentIndex, duration, active} = props;\n  const [pauseTime, setPauseTime] = useState(0);\n  const [startTime, setStartTime] = useState(0);\n  const scale = useRef(new Animated.Value(0)).current;\n  const [width, setWidth] = useState(0);\n\n  const onLayoutAdded = (evt: any) => {\n    setWidth(evt.width);\n  };\n\n  useEffect(() => {\n    switch (active) {\n      case 2:\n        return scale.setValue(width);\n      case 1:\n        return props.isLoaded && !props.isNewStory\n          ? Animated.timing(scale, {\n              toValue: width,\n              duration: getDuration(),\n              easing: Easing.linear,\n              useNativeDriver: false,\n            }).start(({finished}: any) => {\n              if (finished) {\n                props.next();\n              }\n            })\n          : scale.setValue(0);\n      case 0:\n        return scale.setValue(0);\n      default:\n        return scale.setValue(0);\n    }\n  });\n\n  const getDuration = () => {\n    const totalPlaytime = duration * 1000;\n\n    if (props.pause) {\n      return 50000;\n    }\n\n    if (pauseTime === null) {\n      return totalPlaytime;\n    }\n\n    const lastTime = pauseTime - startTime;\n    return totalPlaytime - lastTime;\n  };\n\n  useEffect(() => {\n    if (index === currentIndex) {\n      if (props.pause) {\n        const endtime = Date.now();\n        console.log('endtime', endtime);\n        setPauseTime(endtime);\n      }\n\n      if (startTime === null) {\n        setStartTime(Date.now());\n      }\n    }\n  }, [currentIndex, index, props.pause, startTime]);\n\n  return (\n    <View\n      onLayout={(evt) => onLayoutAdded(evt.nativeEvent.layout)}\n      style={styles.container}>\n      <Animated.View\n        style={[\n          styles.container,\n          {\n            width: scale,\n            backgroundColor: index <= currentIndex ? 'white' : '#555',\n            position: 'absolute',\n            top: 0,\n            margin: 0,\n          },\n        ]}\n      />\n    </View>\n  );\n};\n\nProgressBar.propTypes = {\n  index: PropTypes.number,\n  currentIndex: PropTypes.number,\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 4,\n    flex: 1,\n    backgroundColor: '#555',\n    margin: 2,\n  },\n});\n\nexport default ProgressBar;\n"]},"metadata":{},"sourceType":"script"}