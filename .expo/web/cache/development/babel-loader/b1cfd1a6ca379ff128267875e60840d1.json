{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getChatroomByUsers = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _firestore = _interopRequireDefault(require(\"@react-native-firebase/firestore\"));\n\nvar _utils = require(\"../utils\");\n\nvar getChatroomByUsers = function getChatroomByUsers(userKey, otherUserKey) {\n  var chatroomKey, roomRef, doc;\n  return _regenerator.default.async(function getChatroomByUsers$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          chatroomKey = (0, _utils.generateNewChatRoomKey)(userKey, otherUserKey);\n          roomRef = (0, _firestore.default)().collection('chatrooms').doc(chatroomKey);\n          _context.next = 5;\n          return _regenerator.default.awrap(roomRef.get());\n\n        case 5:\n          doc = _context.sent;\n\n          if (doc.exists) {\n            _context.next = 11;\n            break;\n          }\n\n          console.log('No such document!');\n          return _context.abrupt(\"return\", false);\n\n        case 11:\n          return _context.abrupt(\"return\", (0, _extends2.default)({}, doc.data(), {\n            id: doc.id\n          }));\n\n        case 12:\n          _context.next = 18;\n          break;\n\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          return _context.abrupt(\"return\", false);\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 14]], Promise);\n};\n\nexports.getChatroomByUsers = getChatroomByUsers;","map":{"version":3,"sources":["C:/Program Files/nodejs/ComeClosely/app/services/chatrooms.ts"],"names":["getChatroomByUsers","userKey","otherUserKey","chatroomKey","roomRef","collection","doc","get","exists","console","log","data","id"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AAKA,IAAMA,kBAAkB,GAAG,SAArBA,kBAAqB,CAAOC,OAAP,EAAwBC,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEfC,UAAAA,WAFe,GAED,mCAAuBF,OAAvB,EAAgCC,YAAhC,CAFC;AAGbE,UAAAA,OAHa,GAGH,0BAAYC,UAAZ,CAAuB,WAAvB,EAAoCC,GAApC,CAAwCH,WAAxC,CAHG;AAAA;AAAA,4CAIDC,OAAO,CAACG,GAAR,EAJC;;AAAA;AAIbD,UAAAA,GAJa;;AAAA,cAKdA,GAAG,CAACE,MALU;AAAA;AAAA;AAAA;;AAMfC,UAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AANe,2CAOR,KAPQ;;AAAA;AAAA,sEASHJ,GAAG,CAACK,IAAJ,EATG;AASSC,YAAAA,EAAE,EAAEN,GAAG,CAACM;AATjB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAanBH,UAAAA,OAAO,CAACC,GAAR;AAbmB,2CAcZ,KAdY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA3B","sourcesContent":["import firestore from '@react-native-firebase/firestore';\r\nimport { generateNewChatRoomKey } from '../utils';\r\n\r\nexport {\r\n    getChatroomByUsers\r\n}\r\nconst getChatroomByUsers = async (userKey: string, otherUserKey: string) => {\r\n    try {\r\n        let chatroomKey = generateNewChatRoomKey(userKey, otherUserKey)\r\n        const roomRef = firestore().collection('chatrooms').doc(chatroomKey);\r\n        const doc = await roomRef.get();\r\n        if (!doc.exists) {\r\n            console.log('No such document!');\r\n            return false\r\n        } else {\r\n            return { ...doc.data(), id: doc.id }\r\n        }\r\n\r\n    } catch (error) {\r\n        console.log(error)\r\n        return false\r\n    }\r\n} "]},"metadata":{},"sourceType":"script"}