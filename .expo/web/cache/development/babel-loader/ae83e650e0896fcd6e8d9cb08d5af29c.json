{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeImagePicker = _interopRequireDefault(require(\"react-native-image-picker\"));\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _config = require(\"../../config\");\n\nvar _styles = _interopRequireDefault(require(\"./styles\"));\n\nvar _auth = require(\"../../../../app/providers/auth\");\n\nvar _user = require(\"../../../state/ducks/user\");\n\nvar _jsxFileName = \"C:\\\\Program Files\\\\nodejs\\\\ComeClosely\\\\app\\\\views\\\\screens\\\\PostStory\\\\index.tsx\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar INITIAL_STATE = {\n  isLoading: false,\n  title: '',\n  readMoreUrl: '',\n  avatarSource: '',\n  avatarBackgroundColor: 'rgba(0,0,0,0)'\n};\nvar options = {\n  title: 'Choose Photo',\n  takePhotoButtonTitle: 'Camera',\n  chooseFromLibraryButtonTitle: 'Gallery',\n  mediaType: 'photo',\n  quality: 0.5,\n  storageOptions: {\n    skipBackup: true,\n    path: 'images'\n  }\n};\n\nvar PostStory = function (_React$Component) {\n  (0, _inherits2.default)(PostStory, _React$Component);\n\n  var _super = _createSuper(PostStory);\n\n  function PostStory(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, PostStory);\n    _this = _super.call(this, props);\n\n    _this.setStateProperty = function (key) {\n      return function (value) {\n        _this.setState((0, _defineProperty2.default)({}, key, value));\n      };\n    };\n\n    _this.onAddStorySuccess = function () {\n      _this.props.navigation.goBack();\n    };\n\n    _this.handleSubmit = function () {\n      var _this$state = _this.state,\n          title = _this$state.title,\n          avatarSource = _this$state.avatarSource,\n          readMoreUrl = _this$state.readMoreUrl;\n\n      _this.setState({\n        isLoading: true\n      });\n\n      if (title && avatarSource) {\n        var data = {\n          userId: _this.context.currentUser.uid,\n          url: avatarSource,\n          title: title,\n          isSeen: false\n        };\n\n        if (readMoreUrl) {\n          data.readMoreUrl = readMoreUrl;\n        }\n\n        _this.props.addStory(data, _this.onAddStorySuccess);\n      } else {\n        _this.setState({\n          isLoading: false\n        });\n\n        _reactNative.Alert.alert('Some fields are missing.');\n      }\n    };\n\n    _this.state = (0, _extends2.default)({}, INITIAL_STATE);\n    return _this;\n  }\n\n  (0, _createClass2.default)(PostStory, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state2 = this.state,\n          title = _this$state2.title,\n          readMoreUrl = _this$state2.readMoreUrl,\n          avatarSource = _this$state2.avatarSource,\n          isLoading = _this$state2.isLoading;\n      return _react.default.createElement(_reactNative.View, {\n        style: _styles.default.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }\n      }, _react.default.createElement(_reactNative.Image, {\n        style: _styles.default.backGroundImage,\n        source: _config.AppImages.homeNavigation,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 17\n        }\n      }), _react.default.createElement(_reactNative.View, {\n        style: _styles.default.postMemoryTitleMainView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 17\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: _styles.default.overlay,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: _styles.default.postMemoryTitleChildView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 25\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: _styles.default.postMemoryTitleContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 29\n        }\n      }, _react.default.createElement(_reactNative.Text, {\n        style: _styles.default.postMemoryText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 33\n        }\n      }, \"Post a Story\"), _react.default.createElement(_reactNative.View, {\n        style: _styles.default.backImageMainView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 33\n        }\n      }, _react.default.createElement(_reactNative.TouchableOpacity, {\n        onPress: function onPress() {\n          return _this2.props.navigation.goBack();\n        },\n        style: _styles.default.closeButtonView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 37\n        }\n      }, _react.default.createElement(_reactNative.Image, {\n        source: _config.AppImages.close,\n        style: _styles.default.closeIcon,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 41\n        }\n      }))))))), _react.default.createElement(_reactNative.ScrollView, {\n        style: _styles.default.postMemoryScrollView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 17\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: _styles.default.postMemoryChildScrollView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: _styles.default.titleMainView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 25\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: _styles.default.titleImageMianView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 29\n        }\n      }, _react.default.createElement(_reactNative.TouchableHighlight, {\n        style: _styles.default.dotsBorders,\n        underlayColor: \"rgba(0,0,0,0)\",\n        onPress: function onPress() {\n          _reactNativeImagePicker.default.showImagePicker(options, function (response) {\n            console.log('Response = ', response);\n\n            if (response.didCancel) {\n              console.log('User cancelled image picker');\n            } else if (response.error) {\n              console.log('ImagePicker Error: ', response.error);\n            } else if (response.customButton) {\n              console.log('User tapped custom button: ', response.customButton);\n            } else {\n              _this2.setState({\n                avatarSource: response.uri\n              });\n\n              _this2.setState({\n                avatarBackgroundColor: 'black'\n              });\n            }\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 33\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: _styles.default.borderInsideView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 37\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: _styles.default.borderInsideView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 41\n        }\n      }, _react.default.createElement(_reactNative.Image, {\n        source: _config.AppImages.camera,\n        style: _styles.default.image,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 45\n        }\n      })), _react.default.createElement(_reactNative.Image, {\n        source: {\n          uri: avatarSource\n        },\n        style: _styles.default.avatarImage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 41\n        }\n      })))), _react.default.createElement(_reactNative.View, {\n        style: _styles.default.textInputMainView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 29\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: _styles.default.textInputTitleView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 33\n        }\n      }, _react.default.createElement(_reactNative.Text, {\n        style: _styles.default.textTitleView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 37\n        }\n      }, \"Title\")), _react.default.createElement(_reactNative.View, {\n        style: _styles.default.titleView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 33\n        }\n      }, _react.default.createElement(_reactNative.TextInput, {\n        value: title,\n        onChangeText: this.setStateProperty('title'),\n        style: _styles.default.titleArea,\n        underlineColorAndroid: \"transparent\",\n        placeholder: \"Type something\",\n        placeholderTextColor: \"grey\",\n        textAlignVertical: 'top',\n        multiline: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 37\n        }\n      })))), _react.default.createElement(_reactNative.View, {\n        style: _styles.default.locationTitleMainView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 25\n        }\n      }, _react.default.createElement(_reactNative.Text, {\n        style: _styles.default.loactionTitle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 29\n        }\n      }, \"Readmore Url (optional)\")), _react.default.createElement(_reactNative.View, {\n        style: _styles.default.locationLineView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 25\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: _styles.default.locationMainView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 29\n        }\n      }, _react.default.createElement(_reactNative.TextInput, {\n        value: readMoreUrl,\n        underlineColorAndroid: \"transparent\",\n        placeholder: \"Type a website url\",\n        placeholderTextColor: \"grey\",\n        onChangeText: this.setStateProperty('readMoreUrl'),\n        style: _styles.default.locationTextInputView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 33\n        }\n      }))), _react.default.createElement(_reactNative.View, {\n        style: _styles.default.postMemoryMainView,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 25\n        }\n      }, _react.default.createElement(_reactNative.TouchableOpacity, {\n        onPress: this.handleSubmit,\n        style: _styles.default.createEventButton,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 29\n        }\n      }, isLoading ? _react.default.createElement(_reactNative.ActivityIndicator, {\n        style: {\n          width: 160\n        },\n        color: \"white\",\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 37\n        }\n      }) : _react.default.createElement(_reactNative.Text, {\n        style: _styles.default.createEventButtonText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 37\n        }\n      }, \"POST STORY\"))))));\n    }\n  }]);\n  return PostStory;\n}(_react.default.Component);\n\nPostStory.contextType = _auth.AuthContext;\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    addStory: function addStory(data, onSuccessCallback) {\n      return dispatch(_user.userOperations.addNewStory(data, onSuccessCallback));\n    }\n  };\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    user: state.user.user\n  };\n};\n\nvar _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(PostStory);\n\nexports.default = _default;","map":{"version":3,"sources":["C:/Program Files/nodejs/ComeClosely/app/views/screens/PostStory/index.tsx"],"names":["INITIAL_STATE","isLoading","title","readMoreUrl","avatarSource","avatarBackgroundColor","options","takePhotoButtonTitle","chooseFromLibraryButtonTitle","mediaType","quality","storageOptions","skipBackup","path","PostStory","props","setStateProperty","key","value","setState","onAddStorySuccess","navigation","goBack","handleSubmit","state","data","userId","context","currentUser","uid","url","isSeen","addStory","Alert","alert","styles","container","backGroundImage","AppImages","homeNavigation","postMemoryTitleMainView","overlay","postMemoryTitleChildView","postMemoryTitleContainer","postMemoryText","backImageMainView","closeButtonView","close","closeIcon","postMemoryScrollView","postMemoryChildScrollView","titleMainView","titleImageMianView","dotsBorders","ImagePicker","showImagePicker","response","console","log","didCancel","error","customButton","uri","borderInsideView","camera","image","avatarImage","textInputMainView","textInputTitleView","textTitleView","titleView","titleArea","locationTitleMainView","loactionTitle","locationLineView","locationMainView","locationTextInputView","postMemoryMainView","createEventButton","width","createEventButtonText","React","Component","contextType","AuthContext","mapDispatchToProps","dispatch","onSuccessCallback","userOperations","addNewStory","mapStateToProps","user"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {\r\n    View,\r\n    Text,\r\n    ScrollView,\r\n    Image,\r\n    FlatList,\r\n    TouchableOpacity,\r\n    TextInput,\r\n    TouchableHighlight,\r\n    Alert,\r\n    ActivityIndicator,\r\n} from 'react-native';\r\nimport ImagePicker, { ImagePickerOptions } from 'react-native-image-picker';\r\nimport { connect, } from 'react-redux';\r\n\r\nimport { AppImages } from '../../config';\r\nimport styles from './styles';\r\nimport { MemoryServices } from '../../../services';\r\nimport { AuthContext } from '../../../../app/providers/auth';\r\nimport { userOperations } from '../../../state/ducks/user';\r\n\r\ninterface ComponentProp {\r\n    navigation: any;\r\n    user: any,\r\n    addStory: Function;\r\n}\r\ninterface ComponentState {\r\n    isLoading: boolean,\r\n    title: string;\r\n    readMoreUrl: string;\r\n    avatarSource: string;\r\n    avatarBackgroundColor: string;\r\n}\r\nconst INITIAL_STATE: ComponentState = {\r\n    isLoading: false,\r\n    title: '',\r\n    readMoreUrl: '',\r\n    avatarSource: '',\r\n    avatarBackgroundColor: 'rgba(0,0,0,0)',\r\n};\r\n\r\nconst options: ImagePickerOptions = {\r\n    title: 'Choose Photo',\r\n    takePhotoButtonTitle: 'Camera',\r\n    chooseFromLibraryButtonTitle: 'Gallery',\r\n    mediaType: 'photo',\r\n    quality: 0.5,\r\n    storageOptions: {\r\n        skipBackup: true,\r\n        path: 'images',\r\n    },\r\n};\r\n\r\nclass PostStory extends React.Component<ComponentProp, ComponentState> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = { ...INITIAL_STATE };\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n    setStateProperty = (key: any) => (value: any) => {\r\n        this.setState({ [key]: value })\r\n    }\r\n    onAddStorySuccess = () => {\r\n        this.props.navigation.goBack()\r\n    }\r\n    handleSubmit = () => {\r\n        const { title, avatarSource, readMoreUrl } = this.state;\r\n        this.setState({ isLoading: true })\r\n\r\n        if (title && avatarSource) {\r\n            let data: any = {\r\n                userId: this.context.currentUser.uid,\r\n                url: avatarSource,\r\n                title,\r\n                isSeen: false,\r\n            }\r\n            if (readMoreUrl) {\r\n                data.readMoreUrl = readMoreUrl\r\n            }\r\n            this.props.addStory(data, this.onAddStorySuccess)\r\n        }\r\n        else {\r\n            this.setState({ isLoading: false })\r\n            Alert.alert('Some fields are missing.')\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { title, readMoreUrl, avatarSource, isLoading } = this.state;\r\n        return (\r\n            <View style={styles.container}>\r\n                <Image\r\n                    style={styles.backGroundImage}\r\n                    source={AppImages.homeNavigation}\r\n                />\r\n                <View style={styles.postMemoryTitleMainView}>\r\n                    <View style={styles.overlay}>\r\n                        <View style={styles.postMemoryTitleChildView}>\r\n                            <View style={styles.postMemoryTitleContainer}>\r\n                                <Text style={styles.postMemoryText}>Post a Story</Text>\r\n                                <View style={styles.backImageMainView}>\r\n                                    <TouchableOpacity\r\n                                        onPress={() => this.props.navigation.goBack()}\r\n                                        style={styles.closeButtonView}>\r\n                                        <Image source={AppImages.close} style={styles.closeIcon} />\r\n                                    </TouchableOpacity>\r\n                                </View>\r\n                            </View>\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n                <ScrollView style={styles.postMemoryScrollView}>\r\n                    <View style={styles.postMemoryChildScrollView}>\r\n                        <View style={styles.titleMainView}>\r\n                            <View style={styles.titleImageMianView}>\r\n                                <TouchableHighlight\r\n                                    style={styles.dotsBorders}\r\n                                    underlayColor=\"rgba(0,0,0,0)\"\r\n                                    onPress={() => {\r\n                                        ImagePicker.showImagePicker(options, (response) => {\r\n                                            console.log('Response = ', response);\r\n                                            if (response.didCancel) {\r\n                                                console.log('User cancelled image picker');\r\n                                            } else if (response.error) {\r\n                                                console.log('ImagePicker Error: ', response.error);\r\n                                            } else if (response.customButton) {\r\n                                                console.log(\r\n                                                    'User tapped custom button: ',\r\n                                                    response.customButton,\r\n                                                );\r\n                                            } else {\r\n                                                // const source = { uri: response.uri };\r\n                                                // You can also display the image using data:\r\n                                                this.setState({\r\n                                                    avatarSource: response.uri,\r\n                                                });\r\n                                                this.setState({\r\n                                                    avatarBackgroundColor: 'black',\r\n                                                });\r\n                                            }\r\n                                        });\r\n                                    }}>\r\n                                    <View style={styles.borderInsideView}>\r\n                                        <View style={styles.borderInsideView}>\r\n                                            <Image source={AppImages.camera} style={styles.image} />\r\n                                        </View>\r\n                                        <Image\r\n                                            source={{ uri: avatarSource }}\r\n                                            style={styles.avatarImage}\r\n                                        />\r\n                                    </View>\r\n                                </TouchableHighlight>\r\n                            </View>\r\n                            <View style={styles.textInputMainView}>\r\n                                <View style={styles.textInputTitleView}>\r\n                                    <Text style={styles.textTitleView}>Title</Text>\r\n                                </View>\r\n                                <View style={styles.titleView}>\r\n                                    <TextInput\r\n                                        value={title}\r\n                                        onChangeText={this.setStateProperty('title')}\r\n                                        style={styles.titleArea}\r\n                                        underlineColorAndroid=\"transparent\"\r\n                                        placeholder=\"Type something\"\r\n                                        placeholderTextColor=\"grey\"\r\n                                        textAlignVertical={'top'}\r\n                                        multiline={true}\r\n                                    />\r\n                                </View>\r\n                            </View>\r\n                        </View>\r\n                        <View style={styles.locationTitleMainView}>\r\n                            <Text style={styles.loactionTitle}>Readmore Url (optional)</Text>\r\n                        </View>\r\n                        <View style={styles.locationLineView}>\r\n                            <View style={styles.locationMainView}>\r\n                                <TextInput\r\n                                    value={readMoreUrl}\r\n                                    underlineColorAndroid=\"transparent\"\r\n                                    placeholder=\"Type a website url\"\r\n                                    placeholderTextColor=\"grey\"\r\n                                    onChangeText={this.setStateProperty('readMoreUrl')}\r\n                                    style={styles.locationTextInputView}>\r\n                                </TextInput>\r\n                            </View>\r\n                        </View>\r\n\r\n                        <View style={styles.postMemoryMainView}>\r\n                            <TouchableOpacity onPress={this.handleSubmit} style={styles.createEventButton}>\r\n                                {isLoading ?\r\n                                    <ActivityIndicator style={{ width: 160 }} color=\"white\" size=\"small\" /> :\r\n                                    <Text style={styles.createEventButtonText}>POST STORY</Text>\r\n                                }\r\n                            </TouchableOpacity>\r\n                        </View>\r\n                    </View>\r\n                </ScrollView>\r\n            </View>\r\n        );\r\n    }\r\n}\r\nPostStory.contextType = AuthContext;\r\n\r\nconst mapDispatchToProps = (dispatch: Function) => {\r\n    return {\r\n        addStory: (data: any, onSuccessCallback: Function) => dispatch(userOperations.addNewStory(data, onSuccessCallback))\r\n    };\r\n};\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        user: state.user.user,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PostStory); \r\n"]},"metadata":{},"sourceType":"script"}