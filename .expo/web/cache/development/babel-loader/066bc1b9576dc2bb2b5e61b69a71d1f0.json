{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCommentsByMemoryId = exports.getMemories = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _firestore = _interopRequireDefault(require(\"@react-native-firebase/firestore\"));\n\nvar _types = require(\"./types\");\n\nvar getMemories = function getMemories() {\n  return function _callee(dispatch) {\n    return _regenerator.default.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch({\n              type: _types.GET_MEMORIES_REQUEST\n            });\n\n            try {\n              (0, _firestore.default)().collection('memories').onSnapshot(function (querySnapshot) {\n                var memories = [];\n                querySnapshot.forEach(function (documentSnapshot) {\n                  memories.push((0, _extends2.default)({}, documentSnapshot.data(), {\n                    id: documentSnapshot.id\n                  }));\n                });\n                dispatch({\n                  type: _types.GET_MEMORIES_SUCCESS,\n                  payload: memories\n                });\n              });\n            } catch (error) {\n              dispatch({\n                type: _types.GET_MEMORIES_FAILED,\n                payload: error\n              });\n            }\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nexports.getMemories = getMemories;\n\nvar getCommentsByMemoryId = function getCommentsByMemoryId(memoryId) {\n  return function _callee2(dispatch) {\n    return _regenerator.default.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            dispatch({\n              type: _types.GET_COMMENTS_BY_MEMORY_ID_REQUEST\n            });\n\n            try {\n              (0, _firestore.default)().collection('memoryComments').where('memoryId', '==', memoryId).onSnapshot(function (querySnapshot) {\n                var comments = [];\n                querySnapshot.forEach(function (documentSnapshot) {\n                  comments.push((0, _extends2.default)({}, documentSnapshot.data(), {\n                    id: documentSnapshot.id\n                  }));\n                });\n                dispatch({\n                  type: _types.GET_COMMENTS_BY_MEMORY_ID_SUCCESS,\n                  payload: comments\n                });\n              });\n            } catch (error) {\n              dispatch({\n                type: _types.GET_COMMENTS_BY_MEMORY_ID_FAILED,\n                payload: error\n              });\n            }\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nexports.getCommentsByMemoryId = getCommentsByMemoryId;","map":{"version":3,"sources":["C:/Program Files/nodejs/ComeClosely/app/state/ducks/memories/actions.ts"],"names":["getMemories","dispatch","type","GET_MEMORIES_REQUEST","collection","onSnapshot","querySnapshot","memories","forEach","documentSnapshot","push","data","id","GET_MEMORIES_SUCCESS","payload","error","GET_MEMORIES_FAILED","getCommentsByMemoryId","memoryId","GET_COMMENTS_BY_MEMORY_ID_REQUEST","where","comments","GET_COMMENTS_BY_MEMORY_ID_SUCCESS","GET_COMMENTS_BY_MEMORY_ID_FAILED"],"mappings":";;;;;;;;;;;AAAA;;AAGA;;AAUO,IAAMA,WAAW,GAAG,SAAdA,WAAc,GAAM;AAC7B,SAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AACHA,YAAAA,QAAQ,CAAC;AAAEC,cAAAA,IAAI,EAAEC;AAAR,aAAD,CAAR;;AACA,gBAAI;AACA,wCACKC,UADL,CACgB,UADhB,EAEKC,UAFL,CAEgB,UAACC,aAAD,EAAmB;AAC3B,oBAAMC,QAAa,GAAG,EAAtB;AACAD,gBAAAA,aAAa,CAACE,OAAd,CAAsB,UAACC,gBAAD,EAAsB;AACxCF,kBAAAA,QAAQ,CAACG,IAAT,4BACOD,gBAAgB,CAACE,IAAjB,EADP;AAEIC,oBAAAA,EAAE,EAAEH,gBAAgB,CAACG;AAFzB;AAIH,iBALD;AAMAX,gBAAAA,QAAQ,CAAC;AAAEC,kBAAAA,IAAI,EAAEW,2BAAR;AAA8BC,kBAAAA,OAAO,EAAEP;AAAvC,iBAAD,CAAR;AACH,eAXL;AAYH,aAbD,CAaE,OAAOQ,KAAP,EAAc;AACZd,cAAAA,QAAQ,CAAC;AAAEC,gBAAAA,IAAI,EAAEc,0BAAR;AAA6BF,gBAAAA,OAAO,EAAEC;AAAtC,eAAD,CAAR;AACH;;AAjBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAmBH,CApBM;;;;AAsBA,IAAME,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,QAAD,EAA+B;AAChE,SAAO,kBAAOjB,QAAP;AAAA;AAAA;AAAA;AAAA;AACHA,YAAAA,QAAQ,CAAC;AAAEC,cAAAA,IAAI,EAAEiB;AAAR,aAAD,CAAR;;AACA,gBAAI;AACA,wCACKf,UADL,CACgB,gBADhB,EAEKgB,KAFL,CAEW,UAFX,EAEuB,IAFvB,EAE6BF,QAF7B,EAGKb,UAHL,CAGgB,UAACC,aAAD,EAAmB;AAC3B,oBAAMe,QAAa,GAAG,EAAtB;AACAf,gBAAAA,aAAa,CAACE,OAAd,CAAsB,UAACC,gBAAD,EAAsB;AACxCY,kBAAAA,QAAQ,CAACX,IAAT,4BACOD,gBAAgB,CAACE,IAAjB,EADP;AAEIC,oBAAAA,EAAE,EAAEH,gBAAgB,CAACG;AAFzB;AAIH,iBALD;AAMAX,gBAAAA,QAAQ,CAAC;AAAEC,kBAAAA,IAAI,EAAEoB,wCAAR;AAA2CR,kBAAAA,OAAO,EAAEO;AAApD,iBAAD,CAAR;AACH,eAZL;AAaH,aAdD,CAcE,OAAON,KAAP,EAAc;AACZd,cAAAA,QAAQ,CAAC;AAAEC,gBAAAA,IAAI,EAAEqB,uCAAR;AAA0CT,gBAAAA,OAAO,EAAEC;AAAnD,eAAD,CAAR;AACH;;AAlBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAoBH,CArBM","sourcesContent":["import firestore from '@react-native-firebase/firestore';\r\nimport storage from '@react-native-firebase/storage';\r\n\r\nimport {\r\n    GET_MEMORIES_REQUEST,\r\n    GET_MEMORIES_SUCCESS,\r\n    GET_MEMORIES_FAILED,\r\n    GET_COMMENTS_BY_MEMORY_ID_REQUEST,\r\n    GET_COMMENTS_BY_MEMORY_ID_SUCCESS,\r\n    GET_COMMENTS_BY_MEMORY_ID_FAILED,\r\n} from './types';\r\n\r\n\r\nexport const getMemories = () => {\r\n    return async (dispatch: Function) => {\r\n        dispatch({ type: GET_MEMORIES_REQUEST });\r\n        try {\r\n            firestore()\r\n                .collection('memories')\r\n                .onSnapshot((querySnapshot) => {\r\n                    const memories: any = [];\r\n                    querySnapshot.forEach((documentSnapshot) => {\r\n                        memories.push({\r\n                            ...documentSnapshot.data(),\r\n                            id: documentSnapshot.id,\r\n                        });\r\n                    });\r\n                    dispatch({ type: GET_MEMORIES_SUCCESS, payload: memories });\r\n                });\r\n        } catch (error) {\r\n            dispatch({ type: GET_MEMORIES_FAILED, payload: error });\r\n        }\r\n    };\r\n};\r\n\r\nexport const getCommentsByMemoryId = (memoryId: string | number) => {\r\n    return async (dispatch: Function) => {\r\n        dispatch({ type: GET_COMMENTS_BY_MEMORY_ID_REQUEST });\r\n        try {\r\n            firestore()\r\n                .collection('memoryComments')\r\n                .where('memoryId', '==', memoryId)\r\n                .onSnapshot((querySnapshot) => {\r\n                    const comments: any = [];\r\n                    querySnapshot.forEach((documentSnapshot) => {\r\n                        comments.push({\r\n                            ...documentSnapshot.data(),\r\n                            id: documentSnapshot.id,\r\n                        });\r\n                    });\r\n                    dispatch({ type: GET_COMMENTS_BY_MEMORY_ID_SUCCESS, payload: comments });\r\n                });\r\n        } catch (error) {\r\n            dispatch({ type: GET_COMMENTS_BY_MEMORY_ID_FAILED, payload: error });\r\n        }\r\n    };\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"script"}