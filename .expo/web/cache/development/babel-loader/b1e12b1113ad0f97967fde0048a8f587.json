{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ClickableView = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Program Files\\\\nodejs\\\\ComeClosely\\\\node_modules\\\\react-native-textinput-with-icons\\\\lib\\\\clickableView.js\";\n\nvar ClickableView = function ClickableView(props) {\n  var style = props.style,\n      onPress = props.onPress,\n      disabled = props.disabled,\n      background = props.background,\n      activeOpacity = props.activeOpacity,\n      rippleColor = props.rippleColor,\n      children = props.children;\n\n  if (_reactNative.Platform.OS === \"android\") {\n    return _react.default.createElement(_reactNative.View, {\n      style: style,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }\n    }, _react.default.createElement(_reactNative.TouchableNativeFeedback, {\n      onPress: onPress,\n      disabled: disabled || false,\n      background: background || _reactNative.TouchableNativeFeedback.Ripple(rippleColor || \"rgba(220,220,220,10)\", true),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 17\n      }\n    }, _react.default.createElement(_reactNative.View, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 21\n      }\n    }, children)));\n  } else {\n    return _react.default.createElement(_reactNative.TouchableOpacity, {\n      activeOpacity: activeOpacity,\n      style: style,\n      onPress: onPress,\n      disabled: disabled || false,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }\n    }, children);\n  }\n};\n\nexports.ClickableView = ClickableView;","map":{"version":3,"sources":["C:/Program Files/nodejs/ComeClosely/node_modules/react-native-textinput-with-icons/lib/clickableView.js"],"names":["ClickableView","props","style","onPress","disabled","background","activeOpacity","rippleColor","children","Platform","OS","TouchableNativeFeedback","Ripple"],"mappings":";;;;;;;AAAA;;AACA;;;;;AAEA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAAA,MACtBC,KADsB,GAObD,KAPa,CACtBC,KADsB;AAAA,MAEzBC,OAFyB,GAObF,KAPa,CAEzBE,OAFyB;AAAA,MAGzBC,QAHyB,GAObH,KAPa,CAGzBG,QAHyB;AAAA,MAIzBC,UAJyB,GAObJ,KAPa,CAIzBI,UAJyB;AAAA,MAKzBC,aALyB,GAObL,KAPa,CAKzBK,aALyB;AAAA,MAMzBC,WANyB,GAObN,KAPa,CAMzBM,WANyB;AAAA,MAOzBC,QAPyB,GAObP,KAPa,CAOzBO,QAPyB;;AAS7B,MAAIC,sBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC3B,WACI,6BAAC,iBAAD;AAAM,MAAA,KAAK,EAAER,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,6BAAC,oCAAD;AAAyB,MAAA,OAAO,EAAEC,OAAlC;AAA2C,MAAA,QAAQ,EAAEC,QAAQ,IAAI,KAAjE;AAAwE,MAAA,UAAU,EAAEC,UAAU,IAAIM,qCAAwBC,MAAxB,CAA+BL,WAAW,IAAI,sBAA9C,EAAsE,IAAtE,CAAlG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,6BAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKC,QADL,CADJ,CADJ,CADJ;AASH,GAVD,MAUO;AACH,WACI,6BAAC,6BAAD;AAAkB,MAAA,aAAa,EAAEF,aAAjC;AAAgD,MAAA,KAAK,EAAEJ,KAAvD;AAA8D,MAAA,OAAO,EAAEC,OAAvE;AAAgF,MAAA,QAAQ,EAAEC,QAAQ,IAAI,KAAtG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKI,QADL,CADJ;AAKH;AACJ,CA1BD","sourcesContent":["import React from 'react';\r\nimport {TouchableOpacity, TouchableNativeFeedback, Platform, View} from 'react-native';\r\n\r\nconst ClickableView = (props) => {\r\n    const {style,\r\n        onPress,\r\n        disabled,\r\n        background,\r\n        activeOpacity,\r\n        rippleColor,\r\n        children} = props;\r\n\r\n    if (Platform.OS === \"android\") {\r\n        return(\r\n            <View style={style}>\r\n                <TouchableNativeFeedback onPress={onPress} disabled={disabled || false} background={background || TouchableNativeFeedback.Ripple(rippleColor || \"rgba(220,220,220,10)\", true)} >\r\n                    <View>\r\n                        {children}\r\n                    </View>\r\n                </TouchableNativeFeedback>\r\n            </View>\r\n        );\r\n    } else {\r\n        return(\r\n            <TouchableOpacity activeOpacity={activeOpacity} style={style} onPress={onPress} disabled={disabled || false}>\r\n                {children}\r\n            </TouchableOpacity>\r\n        );\r\n    }\r\n}\r\n\r\nexport {ClickableView};"]},"metadata":{},"sourceType":"script"}